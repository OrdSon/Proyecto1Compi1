
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import Util.DataRecorder;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\025\004\000\002\025" +
    "\003\000\002\002\005\000\002\030\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\070\002\000" +
    "\002\007\005\000\002\071\002\000\002\007\006\000\002" +
    "\072\002\000\002\007\005\000\002\073\002\000\002\007" +
    "\005\000\002\074\002\000\002\007\005\000\002\075\002" +
    "\000\002\007\006\000\002\007\002\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\004\000\002" +
    "\005\003\000\002\076\002\000\002\006\010\000\002\006" +
    "\003\000\002\003\003\000\002\003\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\012" +
    "\004\000\002\012\005\000\002\012\003\000\002\064\004" +
    "\000\002\017\004\000\002\020\004\000\002\031\003\000" +
    "\002\031\005\000\002\031\003\000\002\032\003\000\002" +
    "\032\005\000\002\032\003\000\002\033\003\000\002\033" +
    "\005\000\002\033\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\065\004\000\002\065\004\000" +
    "\002\065\004\000\002\065\003\000\002\015\005\000\002" +
    "\014\003\000\002\077\002\000\002\014\006\000\002\014" +
    "\002\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\016\005\000\002\016\011\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\005\000\002\042\005\000\002\042\004\000\002\043" +
    "\003\000\002\043\004\000\002\043\003\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\045\003\000" +
    "\002\045\003\000\002\045\004\000\002\045\004\000\002" +
    "\046\005\000\002\046\003\000\002\044\003\000\002\044" +
    "\005\000\002\047\004\000\002\034\010\000\002\034\012" +
    "\000\002\034\014\000\002\034\003\000\002\056\011\000" +
    "\002\035\015\000\002\035\015\000\002\035\006\000\002" +
    "\035\003\000\002\050\006\000\002\050\003\000\002\052" +
    "\006\000\002\051\010\000\002\053\011\000\002\057\003" +
    "\000\002\061\004\000\002\061\003\000\002\061\004\000" +
    "\002\061\003\000\002\060\010\000\002\062\007\000\002" +
    "\066\005\000\002\040\003\000\002\040\005\000\002\040" +
    "\003\000\002\063\007\000\002\067\003\000\002\067\005" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\100\002\000\002\036\012\000\002" +
    "\027\004\000\002\027\003\000\002\101\002\000\002\037" +
    "\012\000\002\055\003\000\002\055\005\000\002\055\005" +
    "\000\002\102\002\000\002\054\005\000\002\103\002\000" +
    "\002\054\005\000\002\104\002\000\002\054\005\000\002" +
    "\105\002\000\002\054\005\000\002\106\002\000\002\054" +
    "\005\000\002\107\002\000\002\054\005\000\002\110\002" +
    "\000\002\054\005\000\002\111\002\000\002\054\005\000" +
    "\002\112\002\000\002\054\006\000\002\113\002\000\002" +
    "\054\005\000\002\114\002\000\002\054\007\000\002\115" +
    "\002\000\002\054\006\000\002\054\004\000\002\054\002" +
    "\000\002\023\004\000\002\023\003\000\002\024\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\003\000\002\022" +
    "\004\000\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\020\003\013\013\004\014\014\015\006\016" +
    "\020\021\016\022\015\001\002\000\036\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\016" +
    "\uffec\020\uffec\023\uffec\037\uffec\060\uffec\070\uffec\001\002" +
    "\000\004\002\u0151\001\002\000\036\003\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\016\uffe3" +
    "\020\uffe3\023\uffe3\037\uffe3\060\uffe3\070\uffe3\001\002\000" +
    "\006\003\013\016\020\001\002\000\036\003\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\016" +
    "\uffe4\020\uffe4\023\uffe4\037\uffe4\060\uffe4\070\uffe4\001\002" +
    "\000\020\003\013\013\004\014\014\015\006\016\020\021" +
    "\016\022\015\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\uffe5\001\002\000\036\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\016\uffeb\020\uffeb" +
    "\023\uffeb\037\uffeb\060\uffeb\070\uffeb\001\002\000\036\003" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\016\uffea\020\uffea\023\uffea\037\uffea\060\uffea\070" +
    "\uffea\001\002\000\006\003\u0149\060\u014a\001\002\000\004" +
    "\002\uffe8\001\002\000\004\060\021\001\002\000\004\073" +
    "\uffe7\001\002\000\004\073\023\001\002\000\044\003\045" +
    "\004\027\005\040\006\031\007\030\010\042\011\025\012" +
    "\046\013\004\014\014\015\006\020\052\022\015\023\037" +
    "\060\047\070\055\074\uffed\001\002\000\044\003\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\020\uffd6\022\uffd6\023\uffd6\060" +
    "\uffd6\070\uffd6\074\uffd6\001\002\000\006\003\uffdf\060\uffdf" +
    "\001\002\000\004\060\072\001\002\000\006\003\uffe0\060" +
    "\uffe0\001\002\000\006\003\uffe2\060\uffe2\001\002\000\006" +
    "\003\uffdb\060\uffdb\001\002\000\014\040\302\041\300\042" +
    "\305\062\u0144\065\303\001\002\000\006\003\u0122\060\u0143" +
    "\001\002\000\044\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\020\ufff9\022\ufff9\023\ufff9\060\ufff9\070\ufff9\074\ufff9\001" +
    "\002\000\014\040\uffc7\041\uffc7\042\uffc7\062\uffc7\065\uffc7" +
    "\001\002\000\004\074\u0140\001\002\000\006\003\uffdc\060" +
    "\uffdc\001\002\000\006\003\154\060\u013f\001\002\000\044" +
    "\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\022\ufff3" +
    "\023\ufff3\060\ufff3\070\ufff3\074\ufff3\001\002\000\006\003" +
    "\uffde\060\uffde\001\002\000\044\003\uff7f\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\020\uff7f\022\uff7f\023\uff7f\060\uff7f\070\uff7f" +
    "\074\uff7f\001\002\000\044\003\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\020\ufff5\022\ufff5\023\ufff5\060\ufff5\070\ufff5\074" +
    "\ufff5\001\002\000\006\003\uffda\060\uffda\001\002\000\006" +
    "\003\uffe1\060\uffe1\001\002\000\010\003\354\060\u0133\071" +
    "\uff7e\001\002\000\034\003\045\004\027\005\040\006\031" +
    "\007\030\010\042\011\025\012\046\020\052\023\037\037" +
    "\063\060\047\070\055\001\002\000\044\003\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\020\ufff1\022\ufff1\023\ufff1\060\ufff1" +
    "\070\ufff1\074\ufff1\001\002\000\004\060\uffd9\001\002\000" +
    "\014\040\uffc9\041\uffc9\042\uffc9\062\uffc9\065\uffc9\001\002" +
    "\000\014\040\uffc8\041\uffc8\042\uffc8\062\uffc8\065\uffc8\001" +
    "\002\000\006\003\uffdd\060\uffdd\001\002\000\044\003\045" +
    "\004\027\005\040\006\031\007\030\010\042\011\025\012" +
    "\046\013\004\014\014\015\006\020\052\022\015\023\037" +
    "\060\047\070\055\074\uffed\001\002\000\004\074\ufff0\001" +
    "\002\000\044\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\020" +
    "\uffd8\022\uffd8\023\uffd8\060\uffd8\070\uffd8\074\uffd8\001\002" +
    "\000\014\040\302\041\300\042\305\062\u0106\065\303\001" +
    "\002\000\044\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\020" +
    "\uffef\022\uffef\023\uffef\060\uffef\070\uffef\074\uffef\001\002" +
    "\000\032\003\045\004\027\005\066\006\031\007\030\010" +
    "\042\011\025\012\046\020\052\023\037\060\070\070\055" +
    "\001\002\000\044\003\uff80\004\uff80\005\uff80\006\uff80\007" +
    "\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80" +
    "\020\uff80\022\uff80\023\uff80\060\uff80\070\uff80\074\uff80\001" +
    "\002\000\004\060\072\001\002\000\004\060\072\001\002" +
    "\000\044\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7" +
    "\022\uffd7\023\uffd7\060\uffd7\070\uffd7\074\uffd7\001\002\000" +
    "\004\060\072\001\002\000\044\003\uff85\004\uff85\005\uff85" +
    "\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\020\uff85\022\uff85\023\uff85\060\uff85\070\uff85" +
    "\074\uff85\001\002\000\004\071\uff82\001\002\000\004\071" +
    "\074\001\002\000\032\003\101\004\027\005\077\006\031" +
    "\007\030\010\042\011\025\012\046\023\037\060\102\070" +
    "\055\072\uffbe\001\002\000\004\060\u012e\001\002\000\006" +
    "\064\uffc0\072\uffc1\001\002\000\004\060\u012a\001\002\000" +
    "\004\072\104\001\002\000\010\060\uffda\064\uffc3\072\uffc3" +
    "\001\002\000\004\060\103\001\002\000\006\064\uffc4\072" +
    "\uffc4\001\002\000\004\073\105\001\002\000\056\003\121" +
    "\004\027\005\132\006\031\007\030\010\042\011\025\012" +
    "\046\013\004\014\014\015\006\022\015\023\037\024\120" +
    "\026\111\027\126\030\134\031\123\035\116\060\114\070" +
    "\055\074\uff60\001\002\000\060\003\uff75\004\uff75\005\uff75" +
    "\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\014" +
    "\uff75\015\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75" +
    "\027\uff75\030\uff75\031\uff75\035\uff75\060\uff75\070\uff75\074" +
    "\uff75\001\002\000\060\003\uff77\004\uff77\005\uff77\006\uff77" +
    "\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\015" +
    "\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\035\uff77\060\uff77\070\uff77\074\uff77\001" +
    "\002\000\006\003\u0122\060\u0123\001\002\000\004\071\u0107" +
    "\001\002\000\030\003\045\004\027\005\132\006\031\007" +
    "\030\010\042\011\025\012\046\023\037\060\u0105\070\055" +
    "\001\002\000\060\003\uff73\004\uff73\005\uff73\006\uff73\007" +
    "\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73" +
    "\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030" +
    "\uff73\031\uff73\035\uff73\060\uff73\070\uff73\074\uff73\001\002" +
    "\000\022\003\354\040\302\041\300\042\305\060\360\061" +
    "\353\065\357\071\352\001\002\000\060\003\uff79\004\uff79" +
    "\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013" +
    "\uff79\014\uff79\015\uff79\022\uff79\023\uff79\024\uff79\025\uff79" +
    "\026\uff79\027\uff79\030\uff79\031\uff79\035\uff79\060\uff79\070" +
    "\uff79\074\uff79\001\002\000\006\003\333\071\335\001\002" +
    "\000\004\074\332\001\002\000\022\003\uff63\041\uff63\052" +
    "\uff63\060\uff63\062\327\066\uff63\067\uff63\071\uff63\001\002" +
    "\000\010\003\uffda\060\uffda\073\uff98\001\002\000\014\040" +
    "\302\041\300\042\305\062\301\065\303\001\002\000\004" +
    "\071\252\001\002\000\004\073\247\001\002\000\060\003" +
    "\uff67\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011\uff67" +
    "\012\uff67\013\uff67\014\uff67\015\uff67\022\uff67\023\uff67\024" +
    "\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\035\uff67" +
    "\060\uff67\070\uff67\074\uff67\001\002\000\004\071\167\001" +
    "\002\000\060\003\uff6f\004\uff6f\005\uff6f\006\uff6f\007\uff6f" +
    "\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\022" +
    "\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f" +
    "\031\uff6f\035\uff6f\060\uff6f\070\uff6f\074\uff6f\001\002\000" +
    "\060\003\uff71\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71" +
    "\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71\022\uff71\023" +
    "\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71" +
    "\035\uff71\060\uff71\070\uff71\074\uff71\001\002\000\060\003" +
    "\uff6b\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\015\uff6b\022\uff6b\023\uff6b\024" +
    "\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\035\uff6b" +
    "\060\uff6b\070\uff6b\074\uff6b\001\002\000\006\003\154\060" +
    "\155\001\002\000\060\003\uff6d\004\uff6d\005\uff6d\006\uff6d" +
    "\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d\015" +
    "\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d" +
    "\030\uff6d\031\uff6d\035\uff6d\060\uff6d\070\uff6d\074\uff6d\001" +
    "\002\000\004\073\135\001\002\000\062\003\121\004\027" +
    "\005\132\006\031\007\030\010\042\011\025\012\046\013" +
    "\004\014\014\015\006\022\015\023\037\024\120\025\140" +
    "\026\111\027\126\030\134\031\123\034\136\035\116\060" +
    "\114\070\055\074\uff60\001\002\000\004\062\150\001\002" +
    "\000\004\074\uff7c\001\002\000\004\062\146\001\002\000" +
    "\004\074\142\001\002\000\006\003\143\027\126\001\002" +
    "\000\004\062\uff98\001\002\000\004\062\145\001\002\000" +
    "\060\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\022\uff96\023" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96" +
    "\035\uff96\060\uff96\070\uff96\074\uff96\001\002\000\062\003" +
    "\121\004\027\005\132\006\031\007\030\010\042\011\025" +
    "\012\046\013\004\014\014\015\006\022\015\023\037\024" +
    "\120\025\140\026\111\027\126\030\134\031\123\034\136" +
    "\035\116\060\114\070\055\074\uff60\001\002\000\004\074" +
    "\uff7b\001\002\000\062\003\121\004\027\005\132\006\031" +
    "\007\030\010\042\011\025\012\046\013\004\014\014\015" +
    "\006\022\015\023\037\024\120\025\140\026\111\027\126" +
    "\030\134\031\123\034\136\035\116\060\114\070\055\074" +
    "\uff60\001\002\000\004\074\uff7a\001\002\000\060\003\121" +
    "\004\027\005\132\006\031\007\030\010\042\011\025\012" +
    "\046\013\004\014\014\015\006\022\015\023\037\024\120" +
    "\025\uff60\026\111\027\126\030\134\031\123\035\116\060" +
    "\114\070\055\074\uff60\001\002\000\006\025\uff6c\074\uff6c" +
    "\001\002\000\014\040\uffcd\041\uffcd\042\uffcd\062\uffcd\065" +
    "\uffcd\001\002\000\016\040\uffcf\041\uffcf\042\uffcf\062\uffcf" +
    "\064\157\065\uffcf\001\002\000\014\040\uffd4\041\uffd4\042" +
    "\uffd4\062\uffd4\065\uffd4\001\002\000\006\003\154\060\155" +
    "\001\002\000\014\040\uffce\041\uffce\042\uffce\062\uffce\065" +
    "\uffce\001\002\000\060\003\121\004\027\005\132\006\031" +
    "\007\030\010\042\011\025\012\046\013\004\014\014\015" +
    "\006\022\015\023\037\024\120\025\uff60\026\111\027\126" +
    "\030\134\031\123\035\116\060\114\070\055\074\uff60\001" +
    "\002\000\006\025\uff6a\074\uff6a\001\002\000\060\003\121" +
    "\004\027\005\132\006\031\007\030\010\042\011\025\012" +
    "\046\013\004\014\014\015\006\022\015\023\037\024\120" +
    "\025\uff60\026\111\027\126\030\134\031\123\035\116\060" +
    "\114\070\055\074\uff60\001\002\000\006\025\uff70\074\uff70" +
    "\001\002\000\060\003\121\004\027\005\132\006\031\007" +
    "\030\010\042\011\025\012\046\013\004\014\014\015\006" +
    "\022\015\023\037\024\120\025\uff60\026\111\027\126\030" +
    "\134\031\123\035\116\060\114\070\055\074\uff60\001\002" +
    "\000\006\025\uff6e\074\uff6e\001\002\000\020\003\200\041" +
    "\203\052\170\060\204\066\177\067\171\071\174\001\002" +
    "\000\024\046\uffbd\047\uffbd\053\uffbd\055\uffbd\057\uffbd\062" +
    "\uffbd\064\uffbd\065\uffbd\072\uffbd\001\002\000\044\040\uff54" +
    "\041\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54\053" +
    "\uff54\055\uff54\057\uff54\062\uff54\064\uff54\065\uff54\066\uff54" +
    "\067\uff54\071\uff54\072\uff54\001\002\000\010\046\237\047" +
    "\241\072\uffa5\001\002\000\004\072\236\001\002\000\012" +
    "\041\203\066\177\067\171\071\174\001\002\000\034\041" +
    "\203\046\uffbb\047\uffbb\053\uffbb\055\uffbb\057\uffbb\062\uffbb" +
    "\064\uffbb\065\uffbb\066\177\067\171\071\174\072\uffbb\001" +
    "\002\000\012\053\223\055\224\057\222\065\221\001\002" +
    "\000\044\040\uff57\041\uff57\043\uff57\044\uff57\045\uff57\046" +
    "\uff57\047\uff57\053\uff57\055\uff57\057\uff57\062\uff57\064\uff57" +
    "\065\uff57\066\uff57\067\uff57\071\uff57\072\uff57\001\002\000" +
    "\024\046\uffba\047\uffba\053\uffba\055\uffba\057\uffba\062\uffba" +
    "\064\uffba\065\uffba\072\uffba\001\002\000\044\040\210\041" +
    "\206\043\211\044\207\045\212\046\uff5d\047\uff5d\053\uff5d" +
    "\055\uff5d\057\uff5d\062\uff5d\064\uff5d\065\uff5d\066\uff5d\067" +
    "\uff5d\071\uff5d\072\uff5d\001\002\000\034\041\uff5e\046\uff5e" +
    "\047\uff5e\053\uff5e\055\uff5e\057\uff5e\062\uff5e\064\uff5e\065" +
    "\uff5e\066\uff5e\067\uff5e\071\uff5e\072\uff5e\001\002\000\012" +
    "\041\203\066\177\067\171\071\174\001\002\000\020\046" +
    "\uffa6\047\uffa6\053\uffbc\055\uffbc\057\uffbc\065\uffbc\072\uffa6" +
    "\001\002\000\044\040\uff56\041\uff56\043\uff56\044\uff56\045" +
    "\uff56\046\uff56\047\uff56\053\uff56\055\uff56\057\uff56\062\uff56" +
    "\064\uff56\065\uff56\066\uff56\067\uff56\071\uff56\072\uff56\001" +
    "\002\000\012\041\203\066\177\067\171\071\174\001\002" +
    "\000\012\041\203\066\177\067\171\071\174\001\002\000" +
    "\012\041\203\066\177\067\171\071\174\001\002\000\012" +
    "\041\203\066\177\067\171\071\174\001\002\000\012\041" +
    "\203\066\177\067\171\071\174\001\002\000\044\040\uff5a" +
    "\041\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\053" +
    "\uff5a\055\uff5a\057\uff5a\062\uff5a\064\uff5a\065\uff5a\066\uff5a" +
    "\067\uff5a\071\uff5a\072\uff5a\001\002\000\044\040\uff59\041" +
    "\uff59\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59\053\uff59" +
    "\055\uff59\057\uff59\062\uff59\064\uff59\065\uff59\066\uff59\067" +
    "\uff59\071\uff59\072\uff59\001\002\000\044\040\uff5c\041\uff5c" +
    "\043\211\044\207\045\212\046\uff5c\047\uff5c\053\uff5c\055" +
    "\uff5c\057\uff5c\062\uff5c\064\uff5c\065\uff5c\066\uff5c\067\uff5c" +
    "\071\uff5c\072\uff5c\001\002\000\044\040\uff58\041\uff58\043" +
    "\uff58\044\uff58\045\uff58\046\uff58\047\uff58\053\uff58\055\uff58" +
    "\057\uff58\062\uff58\064\uff58\065\uff58\066\uff58\067\uff58\071" +
    "\uff58\072\uff58\001\002\000\044\040\uff5b\041\uff5b\043\211" +
    "\044\207\045\212\046\uff5b\047\uff5b\053\uff5b\055\uff5b\057" +
    "\uff5b\062\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b\071\uff5b" +
    "\072\uff5b\001\002\000\020\003\200\041\203\052\170\060" +
    "\232\066\177\067\171\071\174\001\002\000\004\065\230" +
    "\001\002\000\004\065\227\001\002\000\022\003\uffb1\041" +
    "\uffb1\052\uffb1\060\uffb1\065\226\066\uffb1\067\uffb1\071\uffb1" +
    "\001\002\000\022\003\uffaf\041\uffaf\052\uffaf\060\uffaf\065" +
    "\225\066\uffaf\067\uffaf\071\uffaf\001\002\000\020\003\uffae" +
    "\041\uffae\052\uffae\060\uffae\066\uffae\067\uffae\071\uffae\001" +
    "\002\000\020\003\uffb0\041\uffb0\052\uffb0\060\uffb0\066\uffb0" +
    "\067\uffb0\071\uffb0\001\002\000\020\003\uffac\041\uffac\052" +
    "\uffac\060\uffac\066\uffac\067\uffac\071\uffac\001\002\000\020" +
    "\003\uffad\041\uffad\052\uffad\060\uffad\066\uffad\067\uffad\071" +
    "\uffad\001\002\000\010\046\uffa7\047\uffa7\072\uffa7\001\002" +
    "\000\014\046\uffbc\047\uffbc\062\uffbc\064\uffbc\072\uffbc\001" +
    "\002\000\034\041\uff5f\046\uff5f\047\uff5f\053\uff5f\055\uff5f" +
    "\057\uff5f\062\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\071" +
    "\uff5f\072\uff5f\001\002\000\016\040\210\041\206\043\211" +
    "\044\207\045\212\072\235\001\002\000\044\040\uff55\041" +
    "\uff55\043\uff55\044\uff55\045\uff55\046\uff55\047\uff55\053\uff55" +
    "\055\uff55\057\uff55\062\uff55\064\uff55\065\uff55\066\uff55\067" +
    "\uff55\071\uff55\072\uff55\001\002\000\006\062\uff99\073\uff99" +
    "\001\002\000\022\003\uffab\041\uffab\046\244\052\uffab\060" +
    "\uffab\066\uffab\067\uffab\071\uffab\001\002\000\020\003\200" +
    "\041\203\052\170\060\204\066\177\067\171\071\174\001" +
    "\002\000\022\003\uffaa\041\uffaa\047\242\052\uffaa\060\uffaa" +
    "\066\uffaa\067\uffaa\071\uffaa\001\002\000\020\003\uffa8\041" +
    "\uffa8\052\uffa8\060\uffa8\066\uffa8\067\uffa8\071\uffa8\001\002" +
    "\000\004\072\uffa4\001\002\000\020\003\uffa9\041\uffa9\052" +
    "\uffa9\060\uffa9\066\uffa9\067\uffa9\071\uffa9\001\002\000\060" +
    "\003\121\004\027\005\132\006\031\007\030\010\042\011" +
    "\025\012\046\013\004\014\014\015\006\022\015\023\037" +
    "\024\120\025\uff60\026\111\027\126\030\134\031\123\035" +
    "\116\060\114\070\055\074\uff60\001\002\000\006\025\uff66" +
    "\074\uff66\001\002\000\062\003\121\004\027\005\132\006" +
    "\031\007\030\010\042\011\025\012\046\013\004\014\014" +
    "\015\006\022\015\023\037\024\120\025\140\026\111\027" +
    "\126\030\134\031\123\034\136\035\116\060\114\070\055" +
    "\074\uff60\001\002\000\004\074\251\001\002\000\060\003" +
    "\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\035\uff97" +
    "\060\uff97\070\uff97\074\uff97\001\002\000\020\003\200\041" +
    "\203\052\170\060\232\066\177\067\171\071\174\001\002" +
    "\000\004\072\254\001\002\000\004\073\255\001\002\000" +
    "\006\032\263\033\257\001\002\000\004\074\277\001\002" +
    "\000\004\063\273\001\002\000\010\032\263\033\257\074" +
    "\uff90\001\002\000\010\032\263\033\257\074\uff92\001\002" +
    "\000\004\074\uff94\001\002\000\004\066\264\001\002\000" +
    "\004\063\265\001\002\000\056\003\121\004\027\005\132" +
    "\006\031\007\030\010\042\011\025\012\046\013\004\014" +
    "\014\015\006\022\015\023\037\024\120\025\uff60\026\111" +
    "\027\126\030\134\031\123\035\116\060\114\070\055\001" +
    "\002\000\004\025\267\001\002\000\004\062\270\001\002" +
    "\000\010\032\uff8f\033\uff8f\074\uff8f\001\002\000\004\074" +
    "\uff93\001\002\000\004\074\uff91\001\002\000\056\003\121" +
    "\004\027\005\132\006\031\007\030\010\042\011\025\012" +
    "\046\013\004\014\014\015\006\022\015\023\037\024\120" +
    "\025\uff60\026\111\027\126\030\134\031\123\035\116\060" +
    "\114\070\055\001\002\000\004\025\275\001\002\000\004" +
    "\062\276\001\002\000\010\032\uff8e\033\uff8e\074\uff8e\001" +
    "\002\000\060\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\035\uff95\060\uff95\070\uff95\074\uff95\001\002\000" +
    "\004\041\325\001\002\000\060\003\uff69\004\uff69\005\uff69" +
    "\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014" +
    "\uff69\015\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69" +
    "\027\uff69\030\uff69\031\uff69\035\uff69\060\uff69\070\uff69\074" +
    "\uff69\001\002\000\006\040\320\065\321\001\002\000\022" +
    "\003\200\017\312\041\203\052\170\060\232\066\177\067" +
    "\171\071\174\001\002\000\004\062\311\001\002\000\006" +
    "\042\307\065\306\001\002\000\020\003\200\041\203\052" +
    "\170\060\232\066\177\067\171\071\174\001\002\000\006" +
    "\062\uffb6\072\uffb6\001\002\000\006\062\uffb3\072\uffb3\001" +
    "\002\000\062\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\020" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\035\uffb9\060\uffb9\070\uffb9\074\uffb9\001" +
    "\002\000\004\060\314\001\002\000\006\062\uffb2\072\uffb2" +
    "\001\002\000\004\071\315\001\002\000\004\072\316\001" +
    "\002\000\004\062\317\001\002\000\062\003\uffb8\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\035\uffb8\060" +
    "\uffb8\070\uffb8\074\uffb8\001\002\000\006\062\uffb7\072\uffb7" +
    "\001\002\000\020\003\200\041\203\052\170\060\232\066" +
    "\177\067\171\071\174\001\002\000\006\062\uffb4\072\uffb4" +
    "\001\002\000\060\003\121\004\027\005\132\006\031\007" +
    "\030\010\042\011\025\012\046\013\004\014\014\015\006" +
    "\022\015\023\037\024\120\025\uff60\026\111\027\126\030" +
    "\134\031\123\035\116\060\114\070\055\074\uff60\001\002" +
    "\000\006\025\uff68\074\uff68\001\002\000\006\062\uffb5\072" +
    "\uffb5\001\002\000\020\003\200\041\203\052\170\060\232" +
    "\066\177\067\171\071\174\001\002\000\006\025\uff61\074" +
    "\uff61\001\002\000\004\062\331\001\002\000\006\025\uff62" +
    "\074\uff62\001\002\000\044\003\uff81\004\uff81\005\uff81\006" +
    "\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81" +
    "\015\uff81\020\uff81\022\uff81\023\uff81\060\uff81\070\uff81\074" +
    "\uff81\001\002\000\060\003\uff9f\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\035\uff9f\060\uff9f\070\uff9f\074\uff9f\001" +
    "\002\000\060\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\035\uffa3\060\uffa3\070\uffa3\074\uffa3\001\002\000" +
    "\020\003\200\041\203\052\170\060\204\066\177\067\171" +
    "\071\174\001\002\000\004\072\337\001\002\000\004\073" +
    "\340\001\002\000\056\003\121\004\027\005\132\006\031" +
    "\007\030\010\042\011\025\012\046\013\004\014\014\015" +
    "\006\022\015\023\037\024\120\026\111\027\126\030\134" +
    "\031\123\035\116\060\114\070\055\074\uff60\001\002\000" +
    "\004\074\342\001\002\000\062\003\uffa2\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\035\uffa2\036\343\060\uffa2\070" +
    "\uffa2\074\uffa2\001\002\000\006\035\116\073\344\001\002" +
    "\000\056\003\121\004\027\005\132\006\031\007\030\010" +
    "\042\011\025\012\046\013\004\014\014\015\006\022\015" +
    "\023\037\024\120\026\111\027\126\030\134\031\123\035" +
    "\116\060\114\070\055\074\uff60\001\002\000\060\003\uffa1" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\035\uffa1\060" +
    "\uffa1\070\uffa1\074\uffa1\001\002\000\004\074\347\001\002" +
    "\000\060\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\035\uffa0\060\uffa0\070\uffa0\074\uffa0\001\002\000\060" +
    "\003\121\004\027\005\132\006\031\007\030\010\042\011" +
    "\025\012\046\013\004\014\014\015\006\022\015\023\037" +
    "\024\120\025\uff60\026\111\027\126\030\134\031\123\035" +
    "\116\060\114\070\055\074\uff60\001\002\000\006\025\uff78" +
    "\074\uff78\001\002\000\020\003\200\041\203\052\170\060" +
    "\232\066\177\067\171\071\174\001\002\000\006\003\366" +
    "\060\370\001\002\000\014\040\uffca\041\uffca\042\uffca\062" +
    "\uffca\065\uffca\001\002\000\004\062\363\001\002\000\014" +
    "\040\uffd3\041\uffd3\042\uffd3\062\uffd3\065\uffd3\001\002\000" +
    "\020\003\200\041\203\052\170\060\232\066\177\067\171" +
    "\071\174\001\002\000\016\040\uffcc\041\uffcc\042\uffcc\062" +
    "\uffcc\064\361\065\uffcc\001\002\000\006\003\354\060\360" +
    "\001\002\000\014\040\uffcb\041\uffcb\042\uffcb\062\uffcb\065" +
    "\uffcb\001\002\000\060\003\uff65\004\uff65\005\uff65\006\uff65" +
    "\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015" +
    "\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65" +
    "\030\uff65\031\uff65\035\uff65\060\uff65\070\uff65\074\uff65\001" +
    "\002\000\060\003\121\004\027\005\132\006\031\007\030" +
    "\010\042\011\025\012\046\013\004\014\014\015\006\022" +
    "\015\023\037\024\120\025\uff60\026\111\027\126\030\134" +
    "\031\123\035\116\060\114\070\055\074\uff60\001\002\000" +
    "\006\025\uff64\074\uff64\001\002\000\060\003\uff8a\004\uff8a" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\035\uff8a\060\uff8a\070" +
    "\uff8a\074\uff8a\001\002\000\060\003\uff8c\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\035\uff8c\060\uff8c\070\uff8c\074" +
    "\uff8c\001\002\000\006\061\372\071\352\001\002\000\060" +
    "\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\022\uff8d\023\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\035" +
    "\uff8d\060\uff8d\070\uff8d\074\uff8d\001\002\000\006\003\366" +
    "\060\370\001\002\000\060\003\uff8b\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b" +
    "\015\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\035\uff8b\060\uff8b\070\uff8b\074\uff8b" +
    "\001\002\000\004\072\u0100\001\002\000\006\064\376\072" +
    "\uff88\001\002\000\020\003\200\041\203\052\170\060\232" +
    "\066\177\067\171\071\174\001\002\000\004\072\uff87\001" +
    "\002\000\004\062\u0101\001\002\000\060\003\uff89\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\035\uff89\060\uff89\070" +
    "\uff89\074\uff89\001\002\000\060\003\121\004\027\005\132" +
    "\006\031\007\030\010\042\011\025\012\046\013\004\014" +
    "\014\015\006\022\015\023\037\024\120\025\uff60\026\111" +
    "\027\126\030\134\031\123\035\116\060\114\070\055\074" +
    "\uff60\001\002\000\006\025\uff72\074\uff72\001\002\000\004" +
    "\062\u0106\001\002\000\006\003\354\060\360\001\002\000" +
    "\062\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\020\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\035\uffc2\060\uffc2\070\uffc2\074\uffc2\001\002\000" +
    "\010\003\u0109\004\u010b\060\u010a\001\002\000\004\072\u011d" +
    "\001\002\000\004\072\uff9a\001\002\000\004\060\u011a\001" +
    "\002\000\004\060\u010c\001\002\000\004\065\u010d\001\002" +
    "\000\004\066\u010e\001\002\000\004\062\u010f\001\002\000" +
    "\004\060\u0110\001\002\000\012\053\223\055\224\057\222" +
    "\065\221\001\002\000\006\060\u0113\066\u0112\001\002\000" +
    "\004\062\u0117\001\002\000\004\062\u0114\001\002\000\004" +
    "\060\u0115\001\002\000\012\040\302\041\300\042\305\065" +
    "\357\001\002\000\004\072\uff9c\001\002\000\004\060\u0118" +
    "\001\002\000\012\040\302\041\300\042\305\065\357\001" +
    "\002\000\004\072\uff9d\001\002\000\004\063\u011b\001\002" +
    "\000\004\060\u011c\001\002\000\004\072\uff9b\001\002\000" +
    "\004\073\u011e\001\002\000\062\003\121\004\027\005\132" +
    "\006\031\007\030\010\042\011\025\012\046\013\004\014" +
    "\014\015\006\022\015\023\037\024\120\025\140\026\111" +
    "\027\126\030\134\031\123\034\136\035\116\060\114\070" +
    "\055\074\uff60\001\002\000\004\074\u0120\001\002\000\060" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\035" +
    "\uff9e\060\uff9e\070\uff9e\074\uff9e\001\002\000\014\040\uffd5" +
    "\041\uffd5\042\uffd5\062\uffd5\065\uffd5\001\002\000\014\040" +
    "\uffd0\041\uffd0\042\uffd0\062\uffd0\065\uffd0\001\002\000\016" +
    "\040\uffd2\041\uffd2\042\uffd2\062\uffd2\064\u0124\065\uffd2\001" +
    "\002\000\006\003\u0122\060\u0123\001\002\000\014\040\uffd1" +
    "\041\uffd1\042\uffd1\062\uffd1\065\uffd1\001\002\000\060\003" +
    "\121\004\027\005\132\006\031\007\030\010\042\011\025" +
    "\012\046\013\004\014\014\015\006\022\015\023\037\024" +
    "\120\025\uff60\026\111\027\126\030\134\031\123\035\116" +
    "\060\114\070\055\074\uff60\001\002\000\006\025\uff76\074" +
    "\uff76\001\002\000\060\003\121\004\027\005\132\006\031" +
    "\007\030\010\042\011\025\012\046\013\004\014\014\015" +
    "\006\022\015\023\037\024\120\025\uff60\026\111\027\126" +
    "\030\134\031\123\035\116\060\114\070\055\074\uff60\001" +
    "\002\000\006\025\uff74\074\uff74\001\002\000\006\064\uffc5" +
    "\072\uffc5\001\002\000\004\064\u012c\001\002\000\032\003" +
    "\101\004\027\005\077\006\031\007\030\010\042\011\025" +
    "\012\046\023\037\060\102\070\055\072\uffbe\001\002\000" +
    "\004\072\uffbf\001\002\000\006\064\uffc6\072\uffc6\001\002" +
    "\000\044\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\020\uff84" +
    "\022\uff84\023\uff84\060\uff84\070\uff84\074\uff84\001\002\000" +
    "\044\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83" +
    "\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\020\uff83\022" +
    "\uff83\023\uff83\060\uff83\070\uff83\074\uff83\001\002\000\044" +
    "\003\045\004\027\005\040\006\031\007\030\010\042\011" +
    "\025\012\046\013\004\014\014\015\006\020\052\022\015" +
    "\023\037\060\047\070\055\074\uffed\001\002\000\004\074" +
    "\uffee\001\002\000\020\040\uffcc\041\uffcc\042\uffcc\062\uffcc" +
    "\064\361\065\uffcc\071\uff82\001\002\000\004\071\u0135\001" +
    "\002\000\032\003\101\004\027\005\077\006\031\007\030" +
    "\010\042\011\025\012\046\023\037\060\102\070\055\072" +
    "\uffbe\001\002\000\004\072\u0137\001\002\000\004\073\u0138" +
    "\001\002\000\056\003\121\004\027\005\132\006\031\007" +
    "\030\010\042\011\025\012\046\013\004\014\014\015\006" +
    "\022\015\023\037\024\120\026\111\027\126\030\134\031" +
    "\123\035\116\060\114\070\055\074\uff60\001\002\000\004" +
    "\074\u013a\001\002\000\044\003\uff7d\004\uff7d\005\uff7d\006" +
    "\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d" +
    "\015\uff7d\020\uff7d\022\uff7d\023\uff7d\060\uff7d\070\uff7d\074" +
    "\uff7d\001\002\000\044\003\045\004\027\005\040\006\031" +
    "\007\030\010\042\011\025\012\046\013\004\014\014\015" +
    "\006\020\052\022\015\023\037\060\047\070\055\074\uffed" +
    "\001\002\000\004\074\ufff4\001\002\000\044\003\045\004" +
    "\027\005\040\006\031\007\030\010\042\011\025\012\046" +
    "\013\004\014\014\015\006\020\052\022\015\023\037\060" +
    "\047\070\055\074\uffed\001\002\000\004\074\ufff2\001\002" +
    "\000\020\040\uffcf\041\uffcf\042\uffcf\062\uffcf\064\157\065" +
    "\uffcf\071\uff82\001\002\000\004\002\uffe6\001\002\000\044" +
    "\003\045\004\027\005\040\006\031\007\030\010\042\011" +
    "\025\012\046\013\004\014\014\015\006\020\052\022\015" +
    "\023\037\060\047\070\055\074\uffed\001\002\000\004\074" +
    "\ufff8\001\002\000\020\040\uffd2\041\uffd2\042\uffd2\062\uffd2" +
    "\064\u0124\065\uffd2\071\uff82\001\002\000\044\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\020\ufff7\022\ufff7\023\ufff7\060" +
    "\ufff7\070\ufff7\074\ufff7\001\002\000\044\003\045\004\027" +
    "\005\040\006\031\007\030\010\042\011\025\012\046\013" +
    "\004\014\014\015\006\020\052\022\015\023\037\060\047" +
    "\070\055\074\uffed\001\002\000\004\074\ufff6\001\002\000" +
    "\044\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\020\uff86\022" +
    "\uff86\023\uff86\060\uff86\070\uff86\074\uff86\001\002\000\004" +
    "\062\u014e\001\002\000\004\062\ufffa\001\002\000\006\061" +
    "\u014b\062\ufffd\001\002\000\010\003\u0149\045\u014d\060\u014a" +
    "\001\002\000\004\062\ufffc\001\002\000\004\062\ufffb\001" +
    "\002\000\020\003\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\021\ufffe\022\ufffe\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffe9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\016\002\010\003\006\004\007\005\011\006" +
    "\016\025\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u014f\001\001\000\002\001" +
    "\001\000\016\002\010\003\006\004\007\005\011\006\016" +
    "\025\u014e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\021\001" +
    "\001\000\002\001\001\000\040\003\047\004\007\007\035" +
    "\010\032\011\025\012\043\013\023\015\040\016\033\017" +
    "\053\020\034\026\031\027\050\037\042\064\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\303\001\001\000\006\031\u0120\036\u012f\001" +
    "\001\000\004\070\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\155\036\u012e\001" +
    "\001\000\004\073\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\u013a\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\355\036\070\101\u0133\001\001" +
    "\000\024\010\032\011\025\013\057\016\061\017\053\020" +
    "\034\026\060\037\063\064\052\001\001\000\004\074\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\047\004\007\007\056" +
    "\010\032\011\025\012\043\013\023\015\040\016\033\017" +
    "\053\020\034\026\031\027\050\037\042\064\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\303\001" +
    "\001\000\004\075\u0130\001\001\000\010\010\064\011\025" +
    "\013\066\001\001\000\002\001\001\000\004\036\u012f\001" +
    "\001\000\004\036\u012e\001\001\000\002\001\001\000\004" +
    "\036\070\001\001\000\002\001\001\000\004\100\072\001" +
    "\001\000\002\001\001\000\010\010\074\014\077\065\075" +
    "\001\001\000\002\001\001\000\004\077\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\111\004\007\010\107\015\130\016\132\017\053\020\034" +
    "\026\121\047\124\050\123\051\127\052\112\053\105\054" +
    "\116\056\126\063\114\064\052\066\106\001\001\000\004" +
    "\104\u0127\001\001\000\004\103\u0125\001\001\000\004\031" +
    "\u0120\001\001\000\002\001\001\000\014\010\107\017\053" +
    "\020\034\026\u0103\064\052\001\001\000\004\105\u0101\001" +
    "\001\000\006\033\355\042\354\001\001\000\004\102\347" +
    "\001\001\000\004\034\333\001\001\000\002\001\001\000" +
    "\004\115\325\001\001\000\002\001\001\000\004\042\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\244\001\001\000\002\001\001\000\004\107\164\001\001" +
    "\000\004\106\162\001\001\000\004\111\160\001\001\000" +
    "\004\032\155\001\001\000\004\110\151\001\001\000\002" +
    "\001\001\000\050\003\111\004\007\010\107\015\130\016" +
    "\132\017\053\020\034\026\121\047\124\050\123\051\127" +
    "\052\112\053\105\054\136\055\140\056\126\063\114\064" +
    "\052\066\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\111\004\007\010\107\015\130\016\132\017" +
    "\053\020\034\026\121\047\124\050\123\051\127\052\112" +
    "\053\105\054\136\055\146\056\126\063\114\064\052\066" +
    "\106\001\001\000\002\001\001\000\050\003\111\004\007" +
    "\010\107\015\130\016\132\017\053\020\034\026\121\047" +
    "\124\050\123\051\127\052\112\053\105\054\136\055\150" +
    "\056\126\063\114\064\052\066\106\001\001\000\002\001" +
    "\001\000\046\003\111\004\007\010\107\015\130\016\132" +
    "\017\053\020\034\026\121\047\124\050\123\051\127\052" +
    "\112\053\105\054\152\056\126\063\114\064\052\066\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\157\001\001\000\002" +
    "\001\001\000\046\003\111\004\007\010\107\015\130\016" +
    "\132\017\053\020\034\026\121\047\124\050\123\051\127" +
    "\052\112\053\105\054\161\056\126\063\114\064\052\066" +
    "\106\001\001\000\002\001\001\000\046\003\111\004\007" +
    "\010\107\015\130\016\132\017\053\020\034\026\121\047" +
    "\124\050\123\051\127\052\112\053\105\054\163\056\126" +
    "\063\114\064\052\066\106\001\001\000\002\001\001\000" +
    "\046\003\111\004\007\010\107\015\130\016\132\017\053" +
    "\020\034\026\121\047\124\050\123\051\127\052\112\053" +
    "\105\054\165\056\126\063\114\064\052\066\106\001\001" +
    "\000\002\001\001\000\016\022\200\023\174\024\201\041" +
    "\175\044\172\046\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\237\001\001\000\002\001\001\000" +
    "\004\022\233\001\001\000\006\022\200\024\232\001\001" +
    "\000\004\043\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\216\001\001\000\004\022\215\001\001\000\004\022\214" +
    "\001\001\000\004\022\213\001\001\000\004\022\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\200\023" +
    "\174\024\201\041\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\200\023\174\024\201\041\175\044" +
    "\242\046\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\111\004" +
    "\007\010\107\015\130\016\132\017\053\020\034\026\121" +
    "\047\124\050\123\051\127\052\112\053\105\054\245\056" +
    "\126\063\114\064\052\066\106\001\001\000\002\001\001" +
    "\000\050\003\111\004\007\010\107\015\130\016\132\017" +
    "\053\020\034\026\121\047\124\050\123\051\127\052\112" +
    "\053\105\054\136\055\247\056\126\063\114\064\052\066" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\200\023\174\024\201\041\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\057\255\060\260\061\261" +
    "\062\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\060\260\061\271\062\257\001\001\000\010\060\260" +
    "\061\270\062\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\111\004\007\010\107" +
    "\015\130\016\132\017\053\020\034\026\121\047\124\050" +
    "\123\051\127\052\112\053\105\054\265\056\126\063\114" +
    "\064\052\066\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\111\004\007\010\107\015\130\016\132\017" +
    "\053\020\034\026\121\047\124\050\123\051\127\052\112" +
    "\053\105\054\273\056\126\063\114\064\052\066\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\112\322\001" +
    "\001\000\002\001\001\000\012\022\200\023\174\024\201" +
    "\041\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\200\023\174\024\201\041\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\200\023\174\024\201\041\321\001\001\000\002" +
    "\001\001\000\046\003\111\004\007\010\107\015\130\016" +
    "\132\017\053\020\034\026\121\047\124\050\123\051\127" +
    "\052\112\053\105\054\323\056\126\063\114\064\052\066" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\200\023\174\024\201\041\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\200\023" +
    "\174\024\201\041\175\044\335\046\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\111\004\007\010" +
    "\107\015\130\016\132\017\053\020\034\026\121\047\124" +
    "\050\123\051\127\052\112\053\105\054\340\056\126\063" +
    "\114\064\052\066\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\344\001\001\000\046\003\111\004" +
    "\007\010\107\015\130\016\132\017\053\020\034\026\121" +
    "\047\124\050\123\051\127\052\112\053\105\054\345\056" +
    "\126\063\114\064\052\066\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\111\004" +
    "\007\010\107\015\130\016\132\017\053\020\034\026\121" +
    "\047\124\050\123\051\127\052\112\053\105\054\350\056" +
    "\126\063\114\064\052\066\106\001\001\000\002\001\001" +
    "\000\014\022\200\023\174\024\201\041\374\067\373\001" +
    "\001\000\006\040\370\063\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\200\023" +
    "\174\024\201\041\312\001\001\000\002\001\001\000\004" +
    "\033\361\001\001\000\002\001\001\000\004\114\363\001" +
    "\001\000\046\003\111\004\007\010\107\015\130\016\132" +
    "\017\053\020\034\026\121\047\124\050\123\051\127\052" +
    "\112\053\105\054\364\056\126\063\114\064\052\066\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\372" +
    "\063\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\200\023\174\024\201\041\374" +
    "\067\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\111\004\007\010\107\015\130" +
    "\016\132\017\053\020\034\026\121\047\124\050\123\051" +
    "\127\052\112\053\105\054\u0102\056\126\063\114\064\052" +
    "\066\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\355\001\001\000\002\001\001\000\004\035\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\111\004\007\010\107" +
    "\015\130\016\132\017\053\020\034\026\121\047\124\050" +
    "\123\051\127\052\112\053\105\054\136\055\u011e\056\126" +
    "\063\114\064\052\066\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u0124\001\001\000\002\001\001\000" +
    "\046\003\111\004\007\010\107\015\130\016\132\017\053" +
    "\020\034\026\121\047\124\050\123\051\127\052\112\053" +
    "\105\054\u0126\056\126\063\114\064\052\066\106\001\001" +
    "\000\002\001\001\000\046\003\111\004\007\010\107\015" +
    "\130\016\132\017\053\020\034\026\121\047\124\050\123" +
    "\051\127\052\112\053\105\054\u0128\056\126\063\114\064" +
    "\052\066\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\074\014\u012c\065\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\047\004\007\007\u0131\010" +
    "\032\011\025\012\043\013\023\015\040\016\033\017\053" +
    "\020\034\026\031\027\050\037\042\064\052\001\001\000" +
    "\002\001\001\000\004\100\072\001\001\000\002\001\001" +
    "\000\010\010\074\014\u0135\065\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\111\004\007\010\107" +
    "\015\130\016\132\017\053\020\034\026\121\047\124\050" +
    "\123\051\127\052\112\053\105\054\u0138\056\126\063\114" +
    "\064\052\066\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\047\004\007\007\u013b\010\032\011\025" +
    "\012\043\013\023\015\040\016\033\017\053\020\034\026" +
    "\031\027\050\037\042\064\052\001\001\000\002\001\001" +
    "\000\040\003\047\004\007\007\u013d\010\032\011\025\012" +
    "\043\013\023\015\040\016\033\017\053\020\034\026\031" +
    "\027\050\037\042\064\052\001\001\000\002\001\001\000" +
    "\004\100\072\001\001\000\002\001\001\000\040\003\047" +
    "\004\007\007\u0141\010\032\011\025\012\043\013\023\015" +
    "\040\016\033\017\053\020\034\026\031\027\050\037\042" +
    "\064\052\001\001\000\002\001\001\000\004\100\072\001" +
    "\001\000\004\071\u0144\001\001\000\040\003\047\004\007" +
    "\007\u0145\010\032\011\025\012\043\013\023\015\040\016" +
    "\033\017\053\020\034\026\031\027\050\037\042\064\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    
    private ArrayList<String> err = new ArrayList<>();
    String className = "";
    public void clearErrors(){
        err.clear();
    }
    
    public Parser(Lexer lexer){//nuevo constructor
        super(lexer);        
    }    
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        err.add(String.format("**El error es el simbolo: " + sym.terminalNames[cur_token.sym]+"\n En la posicion: %d,  %d", cur_token.left, cur_token.right)+" En clase:" +className+"**");
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }
    protected int error_sync_size(){
        return 1;
    }
    DataRecorder recorder= new DataRecorder();
    public DataRecorder getRecorder(){
        return this.recorder;
    }
    public void setRecorder(DataRecorder recorder){
    this.recorder = recorder;
}
//

    public ArrayList<String> getErr() {
        return err;
    }

    public void setErr(ArrayList<String> err) {
        this.err = err;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importe inicio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importe ::= IMPORT s2 SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("importe",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s2 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s2 ::= IDENTIFICADOR DOT s2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s2 ::= IDENTIFICADOR DOT POR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s2 ::= error 
            {
              Object RESULT =null;
		    getErr().add("**Error: se esperaba identificador | \n punto en posicion "+cur_token.left+" "+cur_token.right+" En clase: "+className+"**");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              String RESULT =null;
recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= asignacion NT$0 body 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              String RESULT =null;
recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= expresion SEMICOLON NT$1 body 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              String RESULT =null;
recorder.guardar(); recorder.guardarMetodo();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= m NT$2 body 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              String RESULT =null;
recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= sentencia NT$3 body 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              String RESULT =null;
recorder.guardarMetodo();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body ::= constructor NT$4 body 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$5 ::= 
            {
              String RESULT =null;
recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body ::= visibilidad asignacion NT$5 body 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // visibilidad_clase ::= PUBLIC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad_clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // visibilidad_clase ::= PRIVATE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad_clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // visibilidad_clase ::= FINAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad_clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c ::= visibilidad clase 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c ::= clase 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Clase llamada: "+n);recorder.setClaseActiva(n); 
    className = n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // clase ::= CLASS IDENTIFICADOR NT$6 OPENBRACE body CLOSEBRACE 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // clase ::= error 
            {
              String RESULT =null;
		    getErr().add("**Error: Definicion de clase incorrecta en posicion "+cur_token.left+" "+cur_token.right+"\n En clase: "+className+"**");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // visibilidad ::= visibilidad_clase 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // visibilidad ::= PROTECTED 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // primitivo ::= BYTE 
            {
              String RESULT =null;
		System.out.println(" primitivo BYTE"); recorder.setTipo("byte");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // primitivo ::= SHORT 
            {
              String RESULT =null;
		System.out.println("primitivo  SHORT"); recorder.setTipo("short");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primitivo ::= INT 
            {
              String RESULT =null;
		System.out.println("primitivo INT"); recorder.setTipo("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primitivo ::= LONG 
            {
              String RESULT =null;
		System.out.println("primitivo  LONG"); recorder.setTipo("long");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primitivo ::= FLOAT 
            {
              String RESULT =null;
		System.out.println("primitivo  FLOAT"); recorder.setTipo("float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primitivo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("primitivo  DOUBLE"); recorder.setTipo("double");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // primitivo ::= BOOLEAN 
            {
              String RESULT =null;
		System.out.println("primitivo  BOOLEAN");recorder.setTipo("boolean");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // primitivo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("primitivo  CHAR");recorder.setTipo("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // primitivo ::= error 
            {
              String RESULT =null;
		    getErr().add("**Error: Se esperaba tipo primitivo: {INT|DOUBLE|BOOLEAN|CHAR} \n en posicion "+cur_token.left+" "+cur_token.right+" En clase: "+className+"**");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= VOID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // m ::= visibilidad metodo 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // m ::= visibilidad STATIC metodo 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // m ::= metodo 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primitivoS ::= primitivo s3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivoS",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stringS ::= STRING s10 
            {
              Object RESULT =null;
		System.out.println("STRING"); recorder.setTipo("String");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // objetoS ::= IDENTIFICADOR s11 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println(id); recorder.setTipo(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("objetoS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // s3 ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(id); recorder.addVariable(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s3",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // s3 ::= IDENTIFICADOR COMA s3 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println(id);recorder.addVariable(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s3",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // s3 ::= error 
            {
              Object RESULT =null;
		    getErr().add("**Error: se esperaba  |PRIMITIVO identificador| \n en posicion "+cur_token.left+" "+cur_token.right+" En clase: "+className+"**");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s3",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // s10 ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(id);recorder.addVariable(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s10",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // s10 ::= IDENTIFICADOR COMA s10 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println(id);recorder.addVariable(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s10",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // s10 ::= error 
            {
              Object RESULT =null;
		    getErr().add("Error: se esperaba |String identificador| en posicion "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s10",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // s11 ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(id);recorder.addVariable(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s11",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // s11 ::= IDENTIFICADOR COMA s11 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println(id);recorder.addVariable(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s11",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // s11 ::= error 
            {
              Object RESULT =null;
		    getErr().add("**Error: se esperaba |OBJETO identificador|en posicion "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s11",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= primitivoS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= stringS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= objetoS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_simple ::= primitivo IDENTIFICADOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(p+" "+id);
                                                            recorder.addVariable(id);
                                                            recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_simple ::= STRING IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(id); recorder.setTipo("String");
                                                               recorder.addVariable(id);
                                                               recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_simple ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(name+" "+id);
                                                            recorder.setTipo(id);
                                                            recorder.addVariable(id);
                                                            recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_simple ::= error 
            {
              Object RESULT =null;
		    getErr().add("Error: se esperaba |TIPO_OBJETO identificador|en posicion "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= visibilidad expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // args ::= expresion_simple 
            {
              String RESULT =null;
		recorder.contarArgumento();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$7 ::= 
            {
              String RESULT =null;
recorder.contarArgumento();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= expresion_simple NT$7 COMA args 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor ::= CADENA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("valor cadena "+c); recorder.setValor(c+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("valor identificador");recorder.setValor(c+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= expr_list 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double c = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("valor lista "+c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= error 
            {
              String RESULT =null;
		    getErr().add("Error: se esperaba |VALOR| en posicion "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion ::= expresion igualacion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= expresion EQUALS NEW IDENTIFICADOR OPENPAR CLOSEPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // igualacion ::= MAS MAS 
            {
              String RESULT =null;
		System.out.println("MAS MAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // igualacion ::= MENOS MENOS 
            {
              String RESULT =null;
		System.out.println("MENOS MENOS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // igualacion ::= RESTA RESTA 
            {
              String RESULT =null;
		System.out.println("MENOS MENOS2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // igualacion ::= MAS EQUALS valor 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // igualacion ::= MENOS EQUALS valor 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // igualacion ::= EQUALS valor 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op_logico ::= MENOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op_logico ::= MENOR EQUALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op_logico ::= MAYOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op_logico ::= MAYOR EQUALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_logico ::= EQUALS EQUALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_logico ::= NOT EQUALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // signo_logico ::= AND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // signo_logico ::= OR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // signo_logico ::= AND AND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // signo_logico ::= OR OR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_logica ::= valor op_logico valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_logica",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia_logica ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_logica",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_logica ::= sentencia_logica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_logica ::= sentencia_logica signo_logico expr_logica 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if ::= IF s13 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // s13 ::= OPENPAR expr_logica CLOSEPAR OPENBRACE method_body CLOSEBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s13",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // s13 ::= OPENPAR expr_logica CLOSEPAR OPENBRACE method_body CLOSEBRACE ELSE if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s13",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // s13 ::= OPENPAR expr_logica CLOSEPAR OPENBRACE method_body CLOSEBRACE ELSE OPENBRACE method_body CLOSEBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s13",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // s13 ::= error 
            {
              Object RESULT =null;
		    getErr().add("Error: se Definicion incorrecta de IF en posicion "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s13",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for ::= FOR OPENPAR s14 CLOSEPAR OPENBRACE cicle_body CLOSEBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // s14 ::= INT IDENTIFICADOR EQUALS NUMERO SEMICOLON IDENTIFICADOR op_logico NUMERO SEMICOLON IDENTIFICADOR igualacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s14",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // s14 ::= INT IDENTIFICADOR EQUALS NUMERO SEMICOLON IDENTIFICADOR op_logico IDENTIFICADOR SEMICOLON IDENTIFICADOR igualacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s14",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // s14 ::= IDENTIFICADOR IDENTIFICADOR COLON IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s14",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // s14 ::= error 
            {
              Object RESULT =null;
		    getErr().add("Error: definicion incorrecta de FOR en posicion "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s14",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while ::= WHILE OPENPAR expr_logica CLOSEPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // while ::= error 
            {
              Object RESULT =null;
		    getErr().add("Error: Definicion incorrecta de WHILE en posicion "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // while_cicle ::= while OPENBRACE cicle_body CLOSEBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_cicle",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // do_while ::= DO OPENBRACE cicle_body CLOSEBRACE while SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // switch ::= SWITCH OPENPAR valor CLOSEPAR OPENBRACE switch_body CLOSEBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // switch_body ::= case_group 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_body",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // case_group ::= case case_group 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // case_group ::= case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // case_group ::= default case_group 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_group ::= default 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case ::= CASE NUMERO COLON method_body BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // default ::= DEFAULT COLON method_body BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // llamada_compleja ::= IDENTIFICADOR DOT s21 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_compleja",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // s21 ::= llamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s21",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // s21 ::= IDENTIFICADOR DOT s21 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s21",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // s21 ::= error 
            {
              Object RESULT =null;
		    getErr().add("Error: Llamada mal definida en posicion: "+cur_token.left+" "+cur_token.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s21",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // llamada ::= IDENTIFICADOR OPENPAR params CLOSEPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // params ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // params ::= valor COMA params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // metodo ::= tipo s15 
            {
              String RESULT =null;
		recorder.setTipoMetodo("void");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // metodo ::= IDENTIFICADOR s15 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		recorder.setTipoMetodo(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // metodo ::= STRING s15 
            {
              String RESULT =null;
		recorder.setTipoMetodo("String");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // metodo ::= primitivo s15 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$8 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Metodo llamado "+n);recorder.addMetodo(n);recorder.setTipoMetodo();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // s15 ::= IDENTIFICADOR NT$8 OPENPAR args CLOSEPAR OPENBRACE method_body CLOSEBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		recorder.guardarMetodo();System.out.println("Fin metodo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s15",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // constructor ::= visibilidad s20 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // constructor ::= s20 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
recorder.addMetodo(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // s20 ::= IDENTIFICADOR NT$9 OPENPAR args CLOSEPAR OPENBRACE method_body CLOSEBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		recorder.guardarMetodo();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s20",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cicle_body ::= method_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cicle_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cicle_body ::= BREAK SEMICOLON cicle_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cicle_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cicle_body ::= CONTINUE SEMICOLON cicle_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cicle_body",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$10 ::= 
            {
              Object RESULT =null;
System.out.println(" llamada fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // method_body ::= llamada NT$10 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$11 ::= 
            {
              Object RESULT =null;
System.out.println("llamadacompleja fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // method_body ::= llamada_compleja NT$11 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$12 ::= 
            {
              Object RESULT =null;
System.out.println("switch fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // method_body ::= switch NT$12 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$13 ::= 
            {
              Object RESULT =null;
System.out.println("while fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // method_body ::= while_cicle NT$13 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$14 ::= 
            {
              Object RESULT =null;
System.out.println("do fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // method_body ::= do_while NT$14 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$15 ::= 
            {
              Object RESULT =null;
System.out.println("for fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // method_body ::= for NT$15 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$16 ::= 
            {
              Object RESULT =null;
recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // method_body ::= asignacion NT$16 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$17 ::= 
            {
              Object RESULT =null;
recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // method_body ::= sentencia NT$17 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$18 ::= 
            {
              Object RESULT =null;
recorder.guardar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // method_body ::= expresion SEMICOLON NT$18 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$19 ::= 
            {
              Object RESULT =null;
System.out.println("if fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // method_body ::= if NT$19 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$20 ::= 
            {
              Object RESULT =null;
System.out.println("id fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // method_body ::= IDENTIFICADOR igualacion SEMICOLON NT$20 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$21 ::= 
            {
              Object RESULT =null;
System.out.println("return fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // method_body ::= RETURN NT$21 valor SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // method_body ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("return fin");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expr_list ::= expr_list expr_part 
            {
              double RESULT=0;
		recorder.asignarInt();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expr_list ::= expr_part 
            {
              double RESULT=0;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr_part ::= expr 
            {
              double RESULT=0;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("= " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr ::= expr MAS expr 
            {
              double RESULT=0;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		double e1 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e2 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr ::= expr RESTA expr 
            {
              double RESULT=0;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		double e1 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e2 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr ::= expr POR expr 
            {
              double RESULT=0;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		double e1 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e2 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr ::= expr DIV expr 
            {
              double RESULT=0;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		double e1 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e2 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr ::= expr MOD expr 
            {
              double RESULT=0;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		double e1 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e2 = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr ::= NUMERO 
            {
              double RESULT=0;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr ::= RESTA expr 
            {
              double RESULT=0;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr ::= OPENPAR expr CLOSEPAR 
            {
              double RESULT=0;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		double e = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr ::= DECIMAL 
            {
              double RESULT=0;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
    }

}
