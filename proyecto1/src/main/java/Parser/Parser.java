//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package Parser;

import Util.DataRecorder;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {
    
    public final Class getSymbolContainer() {
        return ParserSym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\216\000\002\002\004\000\002\025\004\000\002\025"
        + "\003\000\002\002\005\000\002\030\003\000\002\030\005"
        + "\000\002\030\005\000\002\007\004\000\002\007\005\000"
        + "\002\007\004\000\002\007\004\000\002\007\004\000\002"
        + "\007\005\000\002\007\002\000\002\004\003\000\002\004"
        + "\003\000\002\004\003\000\002\005\004\000\002\005\003"
        + "\000\002\070\002\000\002\006\010\000\002\003\003\000"
        + "\002\003\003\000\002\010\003\000\002\010\003\000\002"
        + "\010\003\000\002\010\003\000\002\010\003\000\002\010"
        + "\003\000\002\010\003\000\002\010\003\000\002\011\003"
        + "\000\002\012\004\000\002\012\005\000\002\012\003\000"
        + "\002\064\004\000\002\017\004\000\002\020\004\000\002"
        + "\031\003\000\002\031\005\000\002\032\003\000\002\032"
        + "\005\000\002\033\003\000\002\033\005\000\002\026\003"
        + "\000\002\026\003\000\002\026\003\000\002\065\004\000"
        + "\002\065\004\000\002\065\004\000\002\015\005\000\002"
        + "\014\003\000\002\014\005\000\002\014\002\000\002\041"
        + "\003\000\002\041\003\000\002\041\003\000\002\016\005"
        + "\000\002\016\011\000\002\042\004\000\002\042\004\000"
        + "\002\042\004\000\002\042\005\000\002\042\005\000\002"
        + "\042\004\000\002\043\003\000\002\043\004\000\002\043"
        + "\003\000\002\043\004\000\002\043\004\000\002\043\004"
        + "\000\002\045\003\000\002\045\003\000\002\045\004\000"
        + "\002\045\004\000\002\046\005\000\002\046\003\000\002"
        + "\044\003\000\002\044\005\000\002\047\004\000\002\034"
        + "\010\000\002\034\012\000\002\034\014\000\002\056\011"
        + "\000\002\035\015\000\002\035\015\000\002\035\006\000"
        + "\002\050\006\000\002\052\006\000\002\051\010\000\002"
        + "\053\011\000\002\057\003\000\002\061\004\000\002\061"
        + "\003\000\002\061\004\000\002\061\003\000\002\060\010"
        + "\000\002\062\007\000\002\066\005\000\002\040\003\000"
        + "\002\040\005\000\002\063\007\000\002\067\003\000\002"
        + "\067\005\000\002\013\004\000\002\013\004\000\002\013"
        + "\004\000\002\013\004\000\002\071\002\000\002\036\012"
        + "\000\002\027\004\000\002\027\003\000\002\037\011\000"
        + "\002\055\003\000\002\055\005\000\002\055\005\000\002"
        + "\054\004\000\002\054\004\000\002\054\004\000\002\054"
        + "\004\000\002\054\004\000\002\054\004\000\002\054\004"
        + "\000\002\054\004\000\002\054\005\000\002\054\004\000"
        + "\002\054\006\000\002\054\004\000\002\054\003\000\002"
        + "\054\002\000\002\023\004\000\002\023\003\000\002\024"
        + "\003\000\002\022\005\000\002\022\005\000\002\022\005"
        + "\000\002\022\005\000\002\022\005\000\002\022\003\000"
        + "\002\022\004\000\002\022\005\000\002\022\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u012c\000\016\013\004\014\013\015\006\016\017\021"
        + "\014\022\016\001\002\000\034\004\ufff3\005\ufff3\006\ufff3"
        + "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\016\ufff3\020\ufff3\023"
        + "\ufff3\037\ufff3\060\ufff3\070\ufff3\001\002\000\004\002\u012e"
        + "\001\002\000\034\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010"
        + "\uffeb\011\uffeb\012\uffeb\016\uffeb\020\uffeb\023\uffeb\037\uffeb"
        + "\060\uffeb\070\uffeb\001\002\000\004\016\017\001\002\000"
        + "\034\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec"
        + "\012\uffec\016\uffec\020\uffec\023\uffec\037\uffec\060\uffec\070"
        + "\uffec\001\002\000\016\013\004\014\013\015\006\016\017"
        + "\021\014\022\016\001\002\000\004\002\uffff\001\002\000"
        + "\034\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2"
        + "\012\ufff2\016\ufff2\020\ufff2\023\ufff2\037\ufff2\060\ufff2\070"
        + "\ufff2\001\002\000\004\060\u0127\001\002\000\004\002\uffef"
        + "\001\002\000\034\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010"
        + "\ufff1\011\ufff1\012\ufff1\016\ufff1\020\ufff1\023\ufff1\037\ufff1"
        + "\060\ufff1\070\ufff1\001\002\000\004\060\020\001\002\000"
        + "\004\073\uffee\001\002\000\004\073\022\001\002\000\042"
        + "\004\026\005\037\006\027\007\030\010\041\011\024\012"
        + "\044\013\004\014\013\015\006\020\050\022\016\023\036"
        + "\060\045\070\053\074\ufff4\001\002\000\042\004\uffdf\005"
        + "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf"
        + "\014\uffdf\015\uffdf\020\uffdf\022\uffdf\023\uffdf\060\uffdf\070"
        + "\uffdf\074\uffdf\001\002\000\004\060\uffe7\001\002\000\004"
        + "\060\067\001\002\000\004\060\uffe8\001\002\000\004\060"
        + "\uffe3\001\002\000\004\060\uffea\001\002\000\014\040\265"
        + "\041\263\042\270\062\u0123\065\266\001\002\000\004\060"
        + "\u0122\001\002\000\042\004\026\005\037\006\027\007\030"
        + "\010\041\011\024\012\044\013\004\014\013\015\006\020"
        + "\050\022\016\023\036\060\045\070\053\074\ufff4\001\002"
        + "\000\014\040\uffd3\041\uffd3\042\uffd3\062\uffd3\065\uffd3\001"
        + "\002\000\004\074\u0120\001\002\000\004\060\uffe4\001\002"
        + "\000\004\060\u011f\001\002\000\042\004\026\005\037\006"
        + "\027\007\030\010\041\011\024\012\044\013\004\014\013"
        + "\015\006\020\050\022\016\023\036\060\045\070\053\074"
        + "\ufff4\001\002\000\004\060\uffe6\001\002\000\042\004\uff92"
        + "\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013"
        + "\uff92\014\uff92\015\uff92\020\uff92\022\uff92\023\uff92\060\uff92"
        + "\070\uff92\074\uff92\001\002\000\042\004\026\005\037\006"
        + "\027\007\030\010\041\011\024\012\044\013\004\014\013"
        + "\015\006\020\050\022\016\023\036\060\045\070\053\074"
        + "\ufff4\001\002\000\004\060\uffe9\001\002\000\006\060\u0116"
        + "\071\u0117\001\002\000\032\004\026\005\037\006\027\007"
        + "\030\010\041\011\024\012\044\020\050\023\036\037\060"
        + "\060\045\070\053\001\002\000\042\004\026\005\037\006"
        + "\027\007\030\010\041\011\024\012\044\013\004\014\013"
        + "\015\006\020\050\022\016\023\036\060\045\070\053\074"
        + "\ufff4\001\002\000\004\060\uffe2\001\002\000\014\040\uffd5"
        + "\041\uffd5\042\uffd5\062\uffd5\065\uffd5\001\002\000\014\040"
        + "\uffd4\041\uffd4\042\uffd4\062\uffd4\065\uffd4\001\002\000\004"
        + "\060\uffe5\001\002\000\004\074\ufff6\001\002\000\042\004"
        + "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1"
        + "\013\uffe1\014\uffe1\015\uffe1\020\uffe1\022\uffe1\023\uffe1\060"
        + "\uffe1\070\uffe1\074\uffe1\001\002\000\014\040\265\041\263"
        + "\042\270\062\357\065\266\001\002\000\042\004\026\005"
        + "\037\006\027\007\030\010\041\011\024\012\044\013\004"
        + "\014\013\015\006\020\050\022\016\023\036\060\045\070"
        + "\053\074\ufff4\001\002\000\030\004\026\005\063\006\027"
        + "\007\030\010\041\011\024\012\044\020\050\023\036\060"
        + "\065\070\053\001\002\000\042\004\uff93\005\uff93\006\uff93"
        + "\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015"
        + "\uff93\020\uff93\022\uff93\023\uff93\060\uff93\070\uff93\074\uff93"
        + "\001\002\000\004\060\067\001\002\000\004\060\067\001"
        + "\002\000\042\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0"
        + "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\022"
        + "\uffe0\023\uffe0\060\uffe0\070\uffe0\074\uffe0\001\002\000\004"
        + "\060\067\001\002\000\042\004\uff98\005\uff98\006\uff98\007"
        + "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98"
        + "\020\uff98\022\uff98\023\uff98\060\uff98\070\uff98\074\uff98\001"
        + "\002\000\004\071\uff95\001\002\000\004\071\071\001\002"
        + "\000\030\004\026\005\074\006\027\007\030\010\041\011"
        + "\024\012\044\023\036\060\076\070\053\072\uffcc\001\002"
        + "\000\004\060\u0112\001\002\000\006\064\u0110\072\uffce\001"
        + "\002\000\004\060\u010f\001\002\000\004\072\100\001\002"
        + "\000\004\060\077\001\002\000\006\064\uffd0\072\uffd0\001"
        + "\002\000\004\073\101\001\002\000\054\004\026\005\125"
        + "\006\027\007\030\010\041\011\024\012\044\013\004\014"
        + "\013\015\006\022\016\023\036\024\114\026\105\027\122"
        + "\030\127\031\116\035\112\060\110\070\053\074\uff80\001"
        + "\002\000\056\004\026\005\125\006\027\007\030\010\041"
        + "\011\024\012\044\013\004\014\013\015\006\022\016\023"
        + "\036\024\114\025\uff80\026\105\027\122\030\127\031\116"
        + "\035\112\060\110\070\053\074\uff80\001\002\000\056\004"
        + "\026\005\125\006\027\007\030\010\041\011\024\012\044"
        + "\013\004\014\013\015\006\022\016\023\036\024\114\025"
        + "\uff80\026\105\027\122\030\127\031\116\035\112\060\110"
        + "\070\053\074\uff80\001\002\000\004\060\u010a\001\002\000"
        + "\004\071\360\001\002\000\026\004\026\005\125\006\027"
        + "\007\030\010\041\011\024\012\044\023\036\060\356\070"
        + "\053\001\002\000\056\004\026\005\125\006\027\007\030"
        + "\010\041\011\024\012\044\013\004\014\013\015\006\022"
        + "\016\023\036\024\114\025\uff80\026\105\027\122\030\127"
        + "\031\116\035\112\060\110\070\053\074\uff80\001\002\000"
        + "\020\040\265\041\263\042\270\060\334\061\330\065\333"
        + "\071\327\001\002\000\056\004\026\005\125\006\027\007"
        + "\030\010\041\011\024\012\044\013\004\014\013\015\006"
        + "\022\016\023\036\024\114\025\uff80\026\105\027\122\030"
        + "\127\031\116\035\112\060\110\070\053\074\uff80\001\002"
        + "\000\004\071\313\001\002\000\004\074\311\001\002\000"
        + "\022\025\uff81\041\166\052\154\060\215\066\163\067\155"
        + "\071\160\074\uff81\001\002\000\014\040\265\041\263\042"
        + "\270\062\264\065\266\001\002\000\004\071\235\001\002"
        + "\000\004\073\232\001\002\000\056\004\026\005\125\006"
        + "\027\007\030\010\041\011\024\012\044\013\004\014\013"
        + "\015\006\022\016\023\036\024\114\025\uff80\026\105\027"
        + "\122\030\127\031\116\035\112\060\110\070\053\074\uff80"
        + "\001\002\000\056\004\026\005\125\006\027\007\030\010"
        + "\041\011\024\012\044\013\004\014\013\015\006\022\016"
        + "\023\036\024\114\025\uff80\026\105\027\122\030\127\031"
        + "\116\035\112\060\110\070\053\074\uff80\001\002\000\004"
        + "\071\153\001\002\000\056\004\026\005\125\006\027\007"
        + "\030\010\041\011\024\012\044\013\004\014\013\015\006"
        + "\022\016\023\036\024\114\025\uff80\026\105\027\122\030"
        + "\127\031\116\035\112\060\110\070\053\074\uff80\001\002"
        + "\000\056\004\026\005\125\006\027\007\030\010\041\011"
        + "\024\012\044\013\004\014\013\015\006\022\016\023\036"
        + "\024\114\025\uff80\026\105\027\122\030\127\031\116\035"
        + "\112\060\110\070\053\074\uff80\001\002\000\004\060\145"
        + "\001\002\000\056\004\026\005\125\006\027\007\030\010"
        + "\041\011\024\012\044\013\004\014\013\015\006\022\016"
        + "\023\036\024\114\025\uff80\026\105\027\122\030\127\031"
        + "\116\035\112\060\110\070\053\074\uff80\001\002\000\004"
        + "\073\130\001\002\000\060\004\026\005\125\006\027\007"
        + "\030\010\041\011\024\012\044\013\004\014\013\015\006"
        + "\022\016\023\036\024\114\025\133\026\105\027\122\030"
        + "\127\031\116\034\131\035\112\060\110\070\053\074\uff80"
        + "\001\002\000\004\062\142\001\002\000\004\074\uff90\001"
        + "\002\000\004\062\140\001\002\000\004\074\135\001\002"
        + "\000\004\027\122\001\002\000\004\062\137\001\002\000"
        + "\056\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8"
        + "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\022\uffa8\023\uffa8\024"
        + "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\035\uffa8"
        + "\060\uffa8\070\uffa8\074\uffa8\001\002\000\060\004\026\005"
        + "\125\006\027\007\030\010\041\011\024\012\044\013\004"
        + "\014\013\015\006\022\016\023\036\024\114\025\133\026"
        + "\105\027\122\030\127\031\116\034\131\035\112\060\110"
        + "\070\053\074\uff80\001\002\000\004\074\uff8f\001\002\000"
        + "\060\004\026\005\125\006\027\007\030\010\041\011\024"
        + "\012\044\013\004\014\013\015\006\022\016\023\036\024"
        + "\114\025\133\026\105\027\122\030\127\031\116\034\131"
        + "\035\112\060\110\070\053\074\uff80\001\002\000\004\074"
        + "\uff8e\001\002\000\006\025\uff87\074\uff87\001\002\000\016"
        + "\040\uffd9\041\uffd9\042\uffd9\062\uffd9\064\147\065\uffd9\001"
        + "\002\000\014\040\uffdd\041\uffdd\042\uffdd\062\uffdd\065\uffdd"
        + "\001\002\000\004\060\145\001\002\000\014\040\uffd8\041"
        + "\uffd8\042\uffd8\062\uffd8\065\uffd8\001\002\000\006\025\uff86"
        + "\074\uff86\001\002\000\006\025\uff89\074\uff89\001\002\000"
        + "\016\041\166\052\154\060\167\066\163\067\155\071\160"
        + "\001\002\000\030\025\uffcb\046\uffcb\047\uffcb\053\uffcb\055"
        + "\uffcb\057\uffcb\062\uffcb\064\uffcb\065\uffcb\072\uffcb\074\uffcb"
        + "\001\002\000\050\025\uff74\040\uff74\041\uff74\043\uff74\044"
        + "\uff74\045\uff74\046\uff74\047\uff74\053\uff74\055\uff74\057\uff74"
        + "\062\uff74\064\uff74\065\uff74\066\uff74\067\uff74\071\uff74\072"
        + "\uff74\074\uff74\001\002\000\010\046\222\047\224\072\uffb4"
        + "\001\002\000\004\072\221\001\002\000\012\041\166\066"
        + "\163\067\155\071\160\001\002\000\040\025\uffc9\041\166"
        + "\046\uffc9\047\uffc9\053\uffc9\055\uffc9\057\uffc9\062\uffc9\064"
        + "\uffc9\065\uffc9\066\163\067\155\071\160\072\uffc9\074\uffc9"
        + "\001\002\000\012\053\206\055\207\057\205\065\204\001"
        + "\002\000\050\025\uff77\040\uff77\041\uff77\043\uff77\044\uff77"
        + "\045\uff77\046\uff77\047\uff77\053\uff77\055\uff77\057\uff77\062"
        + "\uff77\064\uff77\065\uff77\066\uff77\067\uff77\071\uff77\072\uff77"
        + "\074\uff77\001\002\000\050\025\uff7d\040\173\041\171\043"
        + "\174\044\172\045\175\046\uff7d\047\uff7d\053\uff7d\055\uff7d"
        + "\057\uff7d\062\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\071"
        + "\uff7d\072\uff7d\074\uff7d\001\002\000\040\025\uff7e\041\uff7e"
        + "\046\uff7e\047\uff7e\053\uff7e\055\uff7e\057\uff7e\062\uff7e\064"
        + "\uff7e\065\uff7e\066\uff7e\067\uff7e\071\uff7e\072\uff7e\074\uff7e"
        + "\001\002\000\012\041\166\066\163\067\155\071\160\001"
        + "\002\000\020\046\uffb5\047\uffb5\053\uffca\055\uffca\057\uffca"
        + "\065\uffca\072\uffb5\001\002\000\050\025\uff76\040\uff76\041"
        + "\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\053\uff76"
        + "\055\uff76\057\uff76\062\uff76\064\uff76\065\uff76\066\uff76\067"
        + "\uff76\071\uff76\072\uff76\074\uff76\001\002\000\012\041\166"
        + "\066\163\067\155\071\160\001\002\000\012\041\166\066"
        + "\163\067\155\071\160\001\002\000\012\041\166\066\163"
        + "\067\155\071\160\001\002\000\012\041\166\066\163\067"
        + "\155\071\160\001\002\000\012\041\166\066\163\067\155"
        + "\071\160\001\002\000\050\025\uff7a\040\uff7a\041\uff7a\043"
        + "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\053\uff7a\055\uff7a"
        + "\057\uff7a\062\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\071"
        + "\uff7a\072\uff7a\074\uff7a\001\002\000\050\025\uff79\040\uff79"
        + "\041\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\053"
        + "\uff79\055\uff79\057\uff79\062\uff79\064\uff79\065\uff79\066\uff79"
        + "\067\uff79\071\uff79\072\uff79\074\uff79\001\002\000\050\025"
        + "\uff7c\040\uff7c\041\uff7c\043\174\044\172\045\175\046\uff7c"
        + "\047\uff7c\053\uff7c\055\uff7c\057\uff7c\062\uff7c\064\uff7c\065"
        + "\uff7c\066\uff7c\067\uff7c\071\uff7c\072\uff7c\074\uff7c\001\002"
        + "\000\050\025\uff78\040\uff78\041\uff78\043\uff78\044\uff78\045"
        + "\uff78\046\uff78\047\uff78\053\uff78\055\uff78\057\uff78\062\uff78"
        + "\064\uff78\065\uff78\066\uff78\067\uff78\071\uff78\072\uff78\074"
        + "\uff78\001\002\000\050\025\uff7b\040\uff7b\041\uff7b\043\174"
        + "\044\172\045\175\046\uff7b\047\uff7b\053\uff7b\055\uff7b\057"
        + "\uff7b\062\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\071\uff7b"
        + "\072\uff7b\074\uff7b\001\002\000\016\041\166\052\154\060"
        + "\215\066\163\067\155\071\160\001\002\000\004\065\213"
        + "\001\002\000\004\065\212\001\002\000\020\041\uffc0\052"
        + "\uffc0\060\uffc0\065\211\066\uffc0\067\uffc0\071\uffc0\001\002"
        + "\000\020\041\uffbe\052\uffbe\060\uffbe\065\210\066\uffbe\067"
        + "\uffbe\071\uffbe\001\002\000\016\041\uffbd\052\uffbd\060\uffbd"
        + "\066\uffbd\067\uffbd\071\uffbd\001\002\000\016\041\uffbf\052"
        + "\uffbf\060\uffbf\066\uffbf\067\uffbf\071\uffbf\001\002\000\016"
        + "\041\uffbb\052\uffbb\060\uffbb\066\uffbb\067\uffbb\071\uffbb\001"
        + "\002\000\016\041\uffbc\052\uffbc\060\uffbc\066\uffbc\067\uffbc"
        + "\071\uffbc\001\002\000\010\046\uffb6\047\uffb6\072\uffb6\001"
        + "\002\000\020\025\uffca\046\uffca\047\uffca\062\uffca\064\uffca"
        + "\072\uffca\074\uffca\001\002\000\040\025\uff7f\041\uff7f\046"
        + "\uff7f\047\uff7f\053\uff7f\055\uff7f\057\uff7f\062\uff7f\064\uff7f"
        + "\065\uff7f\066\uff7f\067\uff7f\071\uff7f\072\uff7f\074\uff7f\001"
        + "\002\000\016\040\173\041\171\043\174\044\172\045\175"
        + "\072\220\001\002\000\050\025\uff75\040\uff75\041\uff75\043"
        + "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\053\uff75\055\uff75"
        + "\057\uff75\062\uff75\064\uff75\065\uff75\066\uff75\067\uff75\071"
        + "\uff75\072\uff75\074\uff75\001\002\000\006\062\uffaa\073\uffaa"
        + "\001\002\000\020\041\uffba\046\227\052\uffba\060\uffba\066"
        + "\uffba\067\uffba\071\uffba\001\002\000\016\041\166\052\154"
        + "\060\167\066\163\067\155\071\160\001\002\000\020\041"
        + "\uffb9\047\225\052\uffb9\060\uffb9\066\uffb9\067\uffb9\071\uffb9"
        + "\001\002\000\016\041\uffb7\052\uffb7\060\uffb7\066\uffb7\067"
        + "\uffb7\071\uffb7\001\002\000\004\072\uffb3\001\002\000\016"
        + "\041\uffb8\052\uffb8\060\uffb8\066\uffb8\067\uffb8\071\uffb8\001"
        + "\002\000\006\025\uff88\074\uff88\001\002\000\006\025\uff84"
        + "\074\uff84\001\002\000\060\004\026\005\125\006\027\007"
        + "\030\010\041\011\024\012\044\013\004\014\013\015\006"
        + "\022\016\023\036\024\114\025\133\026\105\027\122\030"
        + "\127\031\116\034\131\035\112\060\110\070\053\074\uff80"
        + "\001\002\000\004\074\234\001\002\000\056\004\uffa9\005"
        + "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9"
        + "\014\uffa9\015\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026"
        + "\uffa9\027\uffa9\030\uffa9\031\uffa9\035\uffa9\060\uffa9\070\uffa9"
        + "\074\uffa9\001\002\000\016\041\166\052\154\060\215\066"
        + "\163\067\155\071\160\001\002\000\004\072\237\001\002"
        + "\000\004\073\240\001\002\000\006\032\246\033\242\001"
        + "\002\000\004\074\262\001\002\000\004\063\256\001\002"
        + "\000\010\032\246\033\242\074\uffa2\001\002\000\010\032"
        + "\246\033\242\074\uffa4\001\002\000\004\074\uffa6\001\002"
        + "\000\004\066\247\001\002\000\004\063\250\001\002\000"
        + "\054\004\026\005\125\006\027\007\030\010\041\011\024"
        + "\012\044\013\004\014\013\015\006\022\016\023\036\024"
        + "\114\025\uff80\026\105\027\122\030\127\031\116\035\112"
        + "\060\110\070\053\001\002\000\004\025\252\001\002\000"
        + "\004\062\253\001\002\000\010\032\uffa1\033\uffa1\074\uffa1"
        + "\001\002\000\004\074\uffa5\001\002\000\004\074\uffa3\001"
        + "\002\000\054\004\026\005\125\006\027\007\030\010\041"
        + "\011\024\012\044\013\004\014\013\015\006\022\016\023"
        + "\036\024\114\025\uff80\026\105\027\122\030\127\031\116"
        + "\035\112\060\110\070\053\001\002\000\004\025\260\001"
        + "\002\000\004\062\261\001\002\000\010\032\uffa0\033\uffa0"
        + "\074\uffa0\001\002\000\056\004\uffa7\005\uffa7\006\uffa7\007"
        + "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7"
        + "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030"
        + "\uffa7\031\uffa7\035\uffa7\060\uffa7\070\uffa7\074\uffa7\001\002"
        + "\000\004\041\307\001\002\000\056\004\026\005\125\006"
        + "\027\007\030\010\041\011\024\012\044\013\004\014\013"
        + "\015\006\022\016\023\036\024\114\025\uff80\026\105\027"
        + "\122\030\127\031\116\035\112\060\110\070\053\074\uff80"
        + "\001\002\000\006\040\303\065\304\001\002\000\020\017"
        + "\275\041\166\052\154\060\215\066\163\067\155\071\160"
        + "\001\002\000\004\062\274\001\002\000\006\042\272\065"
        + "\271\001\002\000\016\041\166\052\154\060\215\066\163"
        + "\067\155\071\160\001\002\000\006\062\uffc5\072\uffc5\001"
        + "\002\000\006\062\uffc2\072\uffc2\001\002\000\060\004\uffc8"
        + "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013"
        + "\uffc8\014\uffc8\015\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8"
        + "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\060"
        + "\uffc8\070\uffc8\074\uffc8\001\002\000\004\060\277\001\002"
        + "\000\006\062\uffc1\072\uffc1\001\002\000\004\071\300\001"
        + "\002\000\004\072\301\001\002\000\004\062\302\001\002"
        + "\000\060\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011"
        + "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\020\uffc7\022\uffc7"
        + "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031"
        + "\uffc7\035\uffc7\060\uffc7\070\uffc7\074\uffc7\001\002\000\006"
        + "\062\uffc6\072\uffc6\001\002\000\016\041\166\052\154\060"
        + "\215\066\163\067\155\071\160\001\002\000\006\062\uffc3"
        + "\072\uffc3\001\002\000\006\025\uff85\074\uff85\001\002\000"
        + "\006\062\uffc4\072\uffc4\001\002\000\006\025\uff82\074\uff82"
        + "\001\002\000\042\004\uff94\005\uff94\006\uff94\007\uff94\010"
        + "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\020\uff94"
        + "\022\uff94\023\uff94\060\uff94\070\uff94\074\uff94\001\002\000"
        + "\056\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2"
        + "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\022\uffb2\023\uffb2\024"
        + "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\035\uffb2"
        + "\060\uffb2\070\uffb2\074\uffb2\001\002\000\016\041\166\052"
        + "\154\060\167\066\163\067\155\071\160\001\002\000\004"
        + "\072\315\001\002\000\004\073\316\001\002\000\054\004"
        + "\026\005\125\006\027\007\030\010\041\011\024\012\044"
        + "\013\004\014\013\015\006\022\016\023\036\024\114\026"
        + "\105\027\122\030\127\031\116\035\112\060\110\070\053"
        + "\074\uff80\001\002\000\004\074\320\001\002\000\060\004"
        + "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1"
        + "\013\uffb1\014\uffb1\015\uffb1\022\uffb1\023\uffb1\024\uffb1\025"
        + "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\035\uffb1\036\321"
        + "\060\uffb1\070\uffb1\074\uffb1\001\002\000\006\035\112\073"
        + "\322\001\002\000\054\004\026\005\125\006\027\007\030"
        + "\010\041\011\024\012\044\013\004\014\013\015\006\022"
        + "\016\023\036\024\114\026\105\027\122\030\127\031\116"
        + "\035\112\060\110\070\053\074\uff80\001\002\000\056\004"
        + "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0"
        + "\013\uffb0\014\uffb0\015\uffb0\022\uffb0\023\uffb0\024\uffb0\025"
        + "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\035\uffb0\060\uffb0"
        + "\070\uffb0\074\uffb0\001\002\000\004\074\325\001\002\000"
        + "\056\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf"
        + "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\022\uffaf\023\uffaf\024"
        + "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\035\uffaf"
        + "\060\uffaf\070\uffaf\074\uffaf\001\002\000\006\025\uff8d\074"
        + "\uff8d\001\002\000\016\041\166\052\154\060\215\066\163"
        + "\067\155\071\160\001\002\000\004\060\342\001\002\000"
        + "\004\062\337\001\002\000\014\040\uffdc\041\uffdc\042\uffdc"
        + "\062\uffdc\065\uffdc\001\002\000\016\041\166\052\154\060"
        + "\215\066\163\067\155\071\160\001\002\000\016\040\uffd7"
        + "\041\uffd7\042\uffd7\062\uffd7\064\335\065\uffd7\001\002\000"
        + "\004\060\334\001\002\000\014\040\uffd6\041\uffd6\042\uffd6"
        + "\062\uffd6\065\uffd6\001\002\000\056\004\026\005\125\006"
        + "\027\007\030\010\041\011\024\012\044\013\004\014\013"
        + "\015\006\022\016\023\036\024\114\025\uff80\026\105\027"
        + "\122\030\127\031\116\035\112\060\110\070\053\074\uff80"
        + "\001\002\000\006\025\uff83\074\uff83\001\002\000\056\004"
        + "\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e"
        + "\013\uff9e\014\uff9e\015\uff9e\022\uff9e\023\uff9e\024\uff9e\025"
        + "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\035\uff9e\060\uff9e"
        + "\070\uff9e\074\uff9e\001\002\000\006\061\344\071\327\001"
        + "\002\000\056\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f"
        + "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\022\uff9f\023"
        + "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f"
        + "\035\uff9f\060\uff9f\070\uff9f\074\uff9f\001\002\000\004\060"
        + "\342\001\002\000\056\004\uff9d\005\uff9d\006\uff9d\007\uff9d"
        + "\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\022"
        + "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d"
        + "\031\uff9d\035\uff9d\060\uff9d\070\uff9d\074\uff9d\001\002\000"
        + "\004\072\352\001\002\000\006\064\350\072\uff9b\001\002"
        + "\000\016\041\166\052\154\060\215\066\163\067\155\071"
        + "\160\001\002\000\004\072\uff9a\001\002\000\004\062\353"
        + "\001\002\000\056\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010"
        + "\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\022\uff9c"
        + "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031"
        + "\uff9c\035\uff9c\060\uff9c\070\uff9c\074\uff9c\001\002\000\006"
        + "\025\uff8a\074\uff8a\001\002\000\004\062\357\001\002\000"
        + "\004\060\334\001\002\000\060\004\uffcf\005\uffcf\006\uffcf"
        + "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015"
        + "\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf"
        + "\027\uffcf\030\uffcf\031\uffcf\035\uffcf\060\uffcf\070\uffcf\074"
        + "\uffcf\001\002\000\006\004\363\060\362\001\002\000\004"
        + "\072\u0105\001\002\000\004\060\u0102\001\002\000\004\060"
        + "\364\001\002\000\004\065\365\001\002\000\004\066\366"
        + "\001\002\000\004\062\367\001\002\000\004\060\370\001"
        + "\002\000\012\053\206\055\207\057\205\065\204\001\002"
        + "\000\006\060\373\066\372\001\002\000\004\062\377\001"
        + "\002\000\004\062\374\001\002\000\004\060\375\001\002"
        + "\000\012\040\265\041\263\042\270\065\333\001\002\000"
        + "\004\072\uffac\001\002\000\004\060\u0100\001\002\000\012"
        + "\040\265\041\263\042\270\065\333\001\002\000\004\072"
        + "\uffad\001\002\000\004\063\u0103\001\002\000\004\060\u0104"
        + "\001\002\000\004\072\uffab\001\002\000\004\073\u0106\001"
        + "\002\000\060\004\026\005\125\006\027\007\030\010\041"
        + "\011\024\012\044\013\004\014\013\015\006\022\016\023"
        + "\036\024\114\025\133\026\105\027\122\030\127\031\116"
        + "\034\131\035\112\060\110\070\053\074\uff80\001\002\000"
        + "\004\074\u0108\001\002\000\056\004\uffae\005\uffae\006\uffae"
        + "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015"
        + "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae"
        + "\030\uffae\031\uffae\035\uffae\060\uffae\070\uffae\074\uffae\001"
        + "\002\000\014\040\uffde\041\uffde\042\uffde\062\uffde\065\uffde"
        + "\001\002\000\016\040\uffdb\041\uffdb\042\uffdb\062\uffdb\064"
        + "\u010b\065\uffdb\001\002\000\004\060\u010a\001\002\000\014"
        + "\040\uffda\041\uffda\042\uffda\062\uffda\065\uffda\001\002\000"
        + "\006\025\uff8c\074\uff8c\001\002\000\006\025\uff8b\074\uff8b"
        + "\001\002\000\006\064\uffd1\072\uffd1\001\002\000\030\004"
        + "\026\005\074\006\027\007\030\010\041\011\024\012\044"
        + "\023\036\060\076\070\053\072\uffcc\001\002\000\004\072"
        + "\uffcd\001\002\000\006\064\uffd2\072\uffd2\001\002\000\042"
        + "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012"
        + "\uff97\013\uff97\014\uff97\015\uff97\020\uff97\022\uff97\023\uff97"
        + "\060\uff97\070\uff97\074\uff97\001\002\000\042\004\uff96\005"
        + "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96"
        + "\014\uff96\015\uff96\020\uff96\022\uff96\023\uff96\060\uff96\070"
        + "\uff96\074\uff96\001\002\000\004\074\ufff5\001\002\000\020"
        + "\040\uffd7\041\uffd7\042\uffd7\062\uffd7\064\335\065\uffd7\071"
        + "\uff95\001\002\000\030\004\026\005\074\006\027\007\030"
        + "\010\041\011\024\012\044\023\036\060\076\070\053\072"
        + "\uffcc\001\002\000\004\072\u0119\001\002\000\004\073\u011a"
        + "\001\002\000\054\004\026\005\125\006\027\007\030\010"
        + "\041\011\024\012\044\013\004\014\013\015\006\022\016"
        + "\023\036\024\114\026\105\027\122\030\127\031\116\035"
        + "\112\060\110\070\053\074\uff80\001\002\000\004\074\u011c"
        + "\001\002\000\042\004\uff91\005\uff91\006\uff91\007\uff91\010"
        + "\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\020\uff91"
        + "\022\uff91\023\uff91\060\uff91\070\uff91\074\uff91\001\002\000"
        + "\004\074\ufff8\001\002\000\004\074\ufff7\001\002\000\020"
        + "\040\uffd9\041\uffd9\042\uffd9\062\uffd9\064\147\065\uffd9\071"
        + "\uff95\001\002\000\004\002\uffed\001\002\000\004\074\ufffa"
        + "\001\002\000\020\040\uffdb\041\uffdb\042\uffdb\062\uffdb\064"
        + "\u010b\065\uffdb\071\uff95\001\002\000\042\004\026\005\037"
        + "\006\027\007\030\010\041\011\024\012\044\013\004\014"
        + "\013\015\006\020\050\022\016\023\036\060\045\070\053"
        + "\074\ufff4\001\002\000\004\074\ufff9\001\002\000\042\004"
        + "\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99"
        + "\013\uff99\014\uff99\015\uff99\020\uff99\022\uff99\023\uff99\060"
        + "\uff99\070\uff99\074\uff99\001\002\000\004\062\u012b\001\002"
        + "\000\006\061\u0128\062\ufffd\001\002\000\006\045\u012a\060"
        + "\u0127\001\002\000\004\062\ufffc\001\002\000\004\062\ufffb"
        + "\001\002\000\016\013\ufffe\014\ufffe\015\ufffe\016\ufffe\021"
        + "\ufffe\022\ufffe\001\002\000\004\002\000\001\002\000\004"
        + "\002\ufff0\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u012c\000\016\002\010\003\006\004\007\005\011\006"
        + "\014\025\004\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\006\u012c\001\001\000\002\001"
        + "\001\000\016\002\010\003\006\004\007\005\011\006\014"
        + "\025\u012b\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\030\u0125\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\070\020\001\001\000\002\001"
        + "\001\000\040\003\045\004\007\007\034\010\031\011\024"
        + "\012\042\013\022\015\037\016\032\017\051\020\033\026"
        + "\030\027\046\037\041\064\050\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\036\u0124\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\042\266"
        + "\001\001\000\006\031\u0108\036\u0113\001\001\000\040\003"
        + "\045\004\007\007\u0120\010\031\011\024\012\042\013\022"
        + "\015\037\016\032\017\051\020\033\026\030\027\046\037"
        + "\041\064\050\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\032\145\036\u0112\001\001\000"
        + "\040\003\045\004\007\007\u011d\010\031\011\024\012\042"
        + "\013\022\015\037\016\032\017\051\020\033\026\030\027"
        + "\046\037\041\064\050\001\001\000\002\001\001\000\002"
        + "\001\001\000\040\003\045\004\007\007\u011c\010\031\011"
        + "\024\012\042\013\022\015\037\016\032\017\051\020\033"
        + "\026\030\027\046\037\041\064\050\001\001\000\002\001"
        + "\001\000\006\033\331\036\065\001\001\000\024\010\031"
        + "\011\024\013\054\016\056\017\051\020\033\026\055\037"
        + "\060\064\050\001\001\000\040\003\045\004\007\007\053"
        + "\010\031\011\024\012\042\013\022\015\037\016\032\017"
        + "\051\020\033\026\030\027\046\037\041\064\050\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\042\266\001\001\000\040\003\045\004\007\007\u0114\010"
        + "\031\011\024\012\042\013\022\015\037\016\032\017\051"
        + "\020\033\026\030\027\046\037\041\064\050\001\001\000"
        + "\010\010\061\011\024\013\063\001\001\000\002\001\001"
        + "\000\004\036\u0113\001\001\000\004\036\u0112\001\001\000"
        + "\002\001\001\000\004\036\065\001\001\000\002\001\001"
        + "\000\004\071\067\001\001\000\002\001\001\000\010\010"
        + "\071\014\074\065\072\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\046\003\105"
        + "\004\007\010\103\015\123\016\125\017\051\020\033\026"
        + "\114\047\117\050\116\051\122\052\106\053\101\054\112"
        + "\056\120\063\110\064\050\066\102\001\001\000\046\003"
        + "\105\004\007\010\103\015\123\016\125\017\051\020\033"
        + "\026\114\047\117\050\116\051\122\052\106\053\101\054"
        + "\u010d\056\120\063\110\064\050\066\102\001\001\000\046"
        + "\003\105\004\007\010\103\015\123\016\125\017\051\020"
        + "\033\026\114\047\117\050\116\051\122\052\106\053\101"
        + "\054\u010c\056\120\063\110\064\050\066\102\001\001\000"
        + "\004\031\u0108\001\001\000\002\001\001\000\014\010\103"
        + "\017\051\020\033\026\354\064\050\001\001\000\046\003"
        + "\105\004\007\010\103\015\123\016\125\017\051\020\033"
        + "\026\114\047\117\050\116\051\122\052\106\053\101\054"
        + "\353\056\120\063\110\064\050\066\102\001\001\000\006"
        + "\033\331\042\330\001\001\000\046\003\105\004\007\010"
        + "\103\015\123\016\125\017\051\020\033\026\114\047\117"
        + "\050\116\051\122\052\106\053\101\054\325\056\120\063"
        + "\110\064\050\066\102\001\001\000\004\034\311\001\001"
        + "\000\002\001\001\000\012\022\163\023\160\024\164\041"
        + "\307\001\001\000\004\042\266\001\001\000\002\001\001"
        + "\000\002\001\001\000\046\003\105\004\007\010\103\015"
        + "\123\016\125\017\051\020\033\026\114\047\117\050\116"
        + "\051\122\052\106\053\101\054\230\056\120\063\110\064"
        + "\050\066\102\001\001\000\046\003\105\004\007\010\103"
        + "\015\123\016\125\017\051\020\033\026\114\047\117\050"
        + "\116\051\122\052\106\053\101\054\227\056\120\063\110"
        + "\064\050\066\102\001\001\000\002\001\001\000\046\003"
        + "\105\004\007\010\103\015\123\016\125\017\051\020\033"
        + "\026\114\047\117\050\116\051\122\052\106\053\101\054"
        + "\151\056\120\063\110\064\050\066\102\001\001\000\046"
        + "\003\105\004\007\010\103\015\123\016\125\017\051\020"
        + "\033\026\114\047\117\050\116\051\122\052\106\053\101"
        + "\054\150\056\120\063\110\064\050\066\102\001\001\000"
        + "\004\032\145\001\001\000\046\003\105\004\007\010\103"
        + "\015\123\016\125\017\051\020\033\026\114\047\117\050"
        + "\116\051\122\052\106\053\101\054\143\056\120\063\110"
        + "\064\050\066\102\001\001\000\002\001\001\000\050\003"
        + "\105\004\007\010\103\015\123\016\125\017\051\020\033"
        + "\026\114\047\117\050\116\051\122\052\106\053\101\054"
        + "\131\055\133\056\120\063\110\064\050\066\102\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\050\135\001\001\000\002\001\001"
        + "\000\002\001\001\000\050\003\105\004\007\010\103\015"
        + "\123\016\125\017\051\020\033\026\114\047\117\050\116"
        + "\051\122\052\106\053\101\054\131\055\140\056\120\063"
        + "\110\064\050\066\102\001\001\000\002\001\001\000\050"
        + "\003\105\004\007\010\103\015\123\016\125\017\051\020"
        + "\033\026\114\047\117\050\116\051\122\052\106\053\101"
        + "\054\131\055\142\056\120\063\110\064\050\066\102\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\032\147\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\016\022\163"
        + "\023\160\024\164\041\161\044\156\046\155\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\045\222\001\001"
        + "\000\002\001\001\000\004\022\216\001\001\000\006\022"
        + "\163\024\215\001\001\000\004\043\202\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\022"
        + "\167\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\022\201\001\001\000\004\022\200\001\001\000\004\022"
        + "\177\001\001\000\004\022\176\001\001\000\004\022\175"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\012\022\163"
        + "\023\160\024\164\041\213\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\016\022\163\023\160\024\164\041\161"
        + "\044\225\046\155\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\050\003\105\004\007\010\103\015"
        + "\123\016\125\017\051\020\033\026\114\047\117\050\116"
        + "\051\122\052\106\053\101\054\131\055\232\056\120\063"
        + "\110\064\050\066\102\001\001\000\002\001\001\000\002"
        + "\001\001\000\012\022\163\023\160\024\164\041\235\001"
        + "\001\000\002\001\001\000\002\001\001\000\012\057\240"
        + "\060\243\061\244\062\242\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\060\243\061\254\062\242\001\001"
        + "\000\010\060\243\061\253\062\242\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\046\003\105"
        + "\004\007\010\103\015\123\016\125\017\051\020\033\026"
        + "\114\047\117\050\116\051\122\052\106\053\101\054\250"
        + "\056\120\063\110\064\050\066\102\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\046\003\105\004\007\010\103\015"
        + "\123\016\125\017\051\020\033\026\114\047\117\050\116"
        + "\051\122\052\106\053\101\054\256\056\120\063\110\064"
        + "\050\066\102\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\046\003\105\004\007\010\103\015\123\016\125\017\051"
        + "\020\033\026\114\047\117\050\116\051\122\052\106\053"
        + "\101\054\305\056\120\063\110\064\050\066\102\001\001"
        + "\000\002\001\001\000\012\022\163\023\160\024\164\041"
        + "\275\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\022\163\023\160\024\164\041\272\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\022\163\023\160\024\164\041\304\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\016\022\163\023"
        + "\160\024\164\041\161\044\313\046\155\001\001\000\002"
        + "\001\001\000\002\001\001\000\046\003\105\004\007\010"
        + "\103\015\123\016\125\017\051\020\033\026\114\047\117"
        + "\050\116\051\122\052\106\053\101\054\316\056\120\063"
        + "\110\064\050\066\102\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\047\322\001\001\000\046\003\105\004"
        + "\007\010\103\015\123\016\125\017\051\020\033\026\114"
        + "\047\117\050\116\051\122\052\106\053\101\054\323\056"
        + "\120\063\110\064\050\066\102\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\022\163\023\160\024\164\041\346\067\345\001\001"
        + "\000\006\040\342\063\340\001\001\000\002\001\001\000"
        + "\002\001\001\000\012\022\163\023\160\024\164\041\275"
        + "\001\001\000\002\001\001\000\004\033\335\001\001\000"
        + "\002\001\001\000\046\003\105\004\007\010\103\015\123"
        + "\016\125\017\051\020\033\026\114\047\117\050\116\051"
        + "\122\052\106\053\101\054\337\056\120\063\110\064\050"
        + "\066\102\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\040\344\063\340"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\014\022\163\023\160\024\164\041\346\067\350"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\033\331"
        + "\001\001\000\002\001\001\000\004\035\360\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\043\370\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\042"
        + "\375\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\042\u0100\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\050"
        + "\003\105\004\007\010\103\015\123\016\125\017\051\020"
        + "\033\026\114\047\117\050\116\051\122\052\106\053\101"
        + "\054\131\055\u0106\056\120\063\110\064\050\066\102\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\031\u010b\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\010\010\071\014\u0110\065\072\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\071\067\001\001\000\010\010"
        + "\071\014\u0117\065\072\001\001\000\002\001\001\000\002"
        + "\001\001\000\046\003\105\004\007\010\103\015\123\016"
        + "\125\017\051\020\033\026\114\047\117\050\116\051\122"
        + "\052\106\053\101\054\u011a\056\120\063\110\064\050\066"
        + "\102\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\071\067\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\071\067\001\001"
        + "\000\040\003\045\004\007\007\u0123\010\031\011\024\012"
        + "\042\013\022\015\037\016\032\017\051\020\033\026\030"
        + "\027\046\037\041\064\050\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\030\u0128\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    private DataRecorder recorder;
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this,this.recorder);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

//código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    
    public Parser(Lexer lexer) {//nuevo constructor
        super(lexer);        
    }    

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }
    
    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    protected int error_sync_size() {
        return 1;
    }//

    public DataRecorder getRecprder() {
        return recorder;
    }

    public void setRecprder(DataRecorder recprder) {
        this.recorder = recprder;
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        
        private final Parser parser;
        DataRecorder recorder;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser, DataRecorder recorder) {
            this.parser = parser;
            this.recorder = recorder;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= inicio EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // inicio ::= importe inicio 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // inicio ::= c 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // importe ::= IMPORT s2 SEMICOLON 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("importe", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // s2 ::= IDENTIFICADOR 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s2", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // s2 ::= IDENTIFICADOR DOT s2 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s2", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // s2 ::= IDENTIFICADOR DOT POR 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s2", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // body ::= asignacion body 
                {
                    String RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("body", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // body ::= expresion SEMICOLON body 
                {
                    String RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("body", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // body ::= m body 
                {
                    String RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("body", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // body ::= sentencia body 
                {
                    String RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("body", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // body ::= constructor body 
                {
                    String RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("body", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // body ::= visibilidad asignacion body 
                {
                    String RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("body", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // body ::= 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("body", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // visibilidad_clase ::= PUBLIC 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad_clase", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // visibilidad_clase ::= PRIVATE 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad_clase", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // visibilidad_clase ::= FINAL 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad_clase", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // c ::= visibilidad clase 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("c", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // c ::= clase 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("c", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // NT$0 ::= 
                {
                    String RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println("Clase llamada: " + n);
                    recorder.setClaseActiva(n);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0", 54, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // clase ::= CLASS IDENTIFICADOR NT$0 OPENBRACE body CLOSEBRACE 
                {
                    String RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // visibilidad ::= visibilidad_clase 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // visibilidad ::= PROTECTED 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // primitivo ::= BYTE 
                {
                    String RESULT = null;
                    System.out.println(" primitivo BYTE");
                    recorder.setTipo("Byte");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // primitivo ::= SHORT 
                {
                    String RESULT = null;
                    System.out.println("primitivo  SHORT");
                    recorder.setTipo("Short");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // primitivo ::= INT 
                {
                    String RESULT = null;
                    System.out.println("primitivo INT");
                    recorder.setTipo("Int");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // primitivo ::= LONG 
                {
                    String RESULT = null;
                    System.out.println("primitivo  LONG");
                    recorder.setTipo("Long");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // primitivo ::= FLOAT 
                {
                    String RESULT = null;
                    System.out.println("primitivo  FLOAT");
                    recorder.setTipo("Float");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // primitivo ::= DOUBLE 
                {
                    String RESULT = null;
                    System.out.println("primitivo  DOUBLE");
                    recorder.setTipo("Double");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // primitivo ::= BOOLEAN 
                {
                    String RESULT = null;
                    System.out.println("primitivo  BOOLEAN");
                    recorder.setTipo("Boolean");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // primitivo ::= CHAR 
                {
                    String RESULT = null;
                    System.out.println("primitivo  CHAR");
                    recorder.setTipo("Char");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivo", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // tipo ::= VOID 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // m ::= visibilidad metodo 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("m", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // m ::= visibilidad STATIC metodo 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("m", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // m ::= metodo 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("m", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // primitivoS ::= primitivo s3 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitivoS", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // stringS ::= STRING s10 
                {
                    Object RESULT = null;
                    System.out.println("STRING");
                    recorder.cambiarTipo("String");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringS", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // objetoS ::= IDENTIFICADOR s11 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    System.out.println(id);
                    recorder.cambiarTipo(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("objetoS", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // s3 ::= IDENTIFICADOR 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println(id);
                    recorder.addVariable(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s3", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // s3 ::= IDENTIFICADOR COMA s3 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    System.out.println(id);
                    recorder.addVariable(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s3", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // s10 ::= IDENTIFICADOR 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println(id);
                    recorder.addVariable(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s10", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // s10 ::= IDENTIFICADOR COMA s10 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    System.out.println(id);
                    recorder.addVariable(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s10", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // s11 ::= IDENTIFICADOR 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println(id);
                    recorder.addVariable(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s11", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // s11 ::= IDENTIFICADOR COMA s11 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    System.out.println(id);
                    recorder.addVariable(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s11", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // expresion ::= primitivoS 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // expresion ::= stringS 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // expresion ::= objetoS 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // expresion_simple ::= primitivo IDENTIFICADOR 
                {
                    Object RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println(p + " " + id);
                    recorder.guardar();
                    recorder.addVariable(id);
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // expresion_simple ::= STRING IDENTIFICADOR 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println(id);
                    recorder.guardar();
                    recorder.setTipo("String");
                    recorder.addVariable(id);
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // expresion_simple ::= IDENTIFICADOR IDENTIFICADOR 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println(name + " " + id);
                    recorder.guardar();
                    recorder.setTipo(id);
                    recorder.addVariable(name);
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // sentencia ::= visibilidad expresion SEMICOLON 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // args ::= expresion_simple 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("args", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // args ::= expresion_simple COMA args 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("args", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // args ::= 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("args", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // valor ::= CADENA 
                {
                    String RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String c = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println("valor cadena " + c);
                    recorder.setValor(c);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // valor ::= IDENTIFICADOR 
                {
                    String RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String c = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println("valor identificador " + c);
                    recorder.setValor(c);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // valor ::= expr_list 
                {
                    String RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object c = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println("valor lista " + c);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // asignacion ::= expresion igualacion SEMICOLON 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // asignacion ::= expresion EQUALS NEW IDENTIFICADOR OPENPAR CLOSEPAR SEMICOLON 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // igualacion ::= MAS MAS 
                {
                    String RESULT = null;
                    System.out.println("MAS MAS");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // igualacion ::= MENOS MENOS 
                {
                    String RESULT = null;
                    System.out.println("MENOS MENOS");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // igualacion ::= RESTA RESTA 
                {
                    String RESULT = null;
                    System.out.println("MENOS MENOS2");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // igualacion ::= MAS EQUALS valor 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // igualacion ::= MENOS EQUALS valor 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // igualacion ::= EQUALS valor 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualacion", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // op_logico ::= MENOR 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // op_logico ::= MENOR EQUALS 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // op_logico ::= MAYOR 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // op_logico ::= MAYOR EQUALS 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // op_logico ::= EQUALS EQUALS 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // op_logico ::= NOT EQUALS 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // signo_logico ::= AND 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // signo_logico ::= OR 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // signo_logico ::= AND AND 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // signo_logico ::= OR OR 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_logico", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // sentencia_logica ::= valor op_logico valor 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_logica", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // sentencia_logica ::= IDENTIFICADOR 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_logica", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // expr_logica ::= sentencia_logica 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // expr_logica ::= sentencia_logica signo_logico expr_logica 
                {
                    String RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // if ::= IF s13 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("if", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // s13 ::= OPENPAR expr_logica CLOSEPAR OPENBRACE method_body CLOSEBRACE 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s13", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // s13 ::= OPENPAR expr_logica CLOSEPAR OPENBRACE method_body CLOSEBRACE ELSE if 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s13", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // s13 ::= OPENPAR expr_logica CLOSEPAR OPENBRACE method_body CLOSEBRACE ELSE OPENBRACE method_body CLOSEBRACE 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s13", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // for ::= FOR OPENPAR s14 CLOSEPAR OPENBRACE cicle_body CLOSEBRACE 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("for", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // s14 ::= INT IDENTIFICADOR EQUALS NUMERO SEMICOLON IDENTIFICADOR op_logico NUMERO SEMICOLON IDENTIFICADOR igualacion 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s14", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // s14 ::= INT IDENTIFICADOR EQUALS NUMERO SEMICOLON IDENTIFICADOR op_logico IDENTIFICADOR SEMICOLON IDENTIFICADOR igualacion 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s14", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // s14 ::= IDENTIFICADOR IDENTIFICADOR COLON IDENTIFICADOR 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s14", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // while ::= WHILE OPENPAR expr_logica CLOSEPAR 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("while", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // while_cicle ::= while OPENBRACE cicle_body CLOSEBRACE 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_cicle", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // do_while ::= DO OPENBRACE cicle_body CLOSEBRACE while SEMICOLON 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // switch ::= SWITCH OPENPAR valor CLOSEPAR OPENBRACE switch_body CLOSEBRACE 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // switch_body ::= case_group 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_body", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // case_group ::= case case_group 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // case_group ::= case 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // case_group ::= default case_group 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // case_group ::= default 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_group", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // case ::= CASE NUMERO COLON method_body BREAK SEMICOLON 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // default ::= DEFAULT COLON method_body BREAK SEMICOLON 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("default", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // llamada_compleja ::= IDENTIFICADOR DOT s21 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_compleja", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // s21 ::= llamada 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s21", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // s21 ::= IDENTIFICADOR DOT s21 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s21", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // llamada ::= IDENTIFICADOR OPENPAR params CLOSEPAR SEMICOLON 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // params ::= valor 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("params", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // params ::= valor COMA params 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("params", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // metodo ::= tipo s15 
                {
                    String RESULT = null;
                    System.out.println("tipo void");
                    recorder.setTipoMetodo("Void");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // metodo ::= IDENTIFICADOR s15 
                {
                    String RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String i = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    System.out.println("tipo" + i);
                    recorder.setTipoMetodo(i);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // metodo ::= STRING s15 
                {
                    String RESULT = null;
                    System.out.println("tipo String");
                    recorder.setTipoMetodo("String");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // metodo ::= primitivo s15 
                {
                    String RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    recorder.setTipo();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // NT$1 ::= 
                {
                    Object RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println("Metodo llamado: " + n);
                    recorder.addMetodo(n);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1", 55, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // s15 ::= IDENTIFICADOR NT$1 OPENPAR args CLOSEPAR OPENBRACE method_body CLOSEBRACE 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$1
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    recorder.guardarMetodo();
                    System.out.println("Fin metodo");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s15", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // constructor ::= visibilidad s20 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // constructor ::= s20 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // s20 ::= IDENTIFICADOR OPENPAR args CLOSEPAR OPENBRACE method_body CLOSEBRACE 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("s20", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // cicle_body ::= method_body 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cicle_body", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // cicle_body ::= BREAK SEMICOLON cicle_body 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cicle_body", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // cicle_body ::= CONTINUE SEMICOLON cicle_body 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cicle_body", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // method_body ::= llamada method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // method_body ::= llamada_compleja method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // method_body ::= switch method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // method_body ::= while_cicle method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // method_body ::= do_while method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // method_body ::= for method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // method_body ::= asignacion method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // method_body ::= sentencia method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // method_body ::= expresion SEMICOLON method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // method_body ::= if method_body 
                {  
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // method_body ::= IDENTIFICADOR igualacion SEMICOLON method_body 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // method_body ::= RETURN valor 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // method_body ::= RETURN 
                {
                    Object RESULT = null;
                    recorder.guardar();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // method_body ::= 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // expr_list ::= expr_list expr_part 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // expr_list ::= expr_part 
                {
                    Object RESULT = null;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // expr_part ::= expr 
                {
                    Object RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println("= " + e); 
                    recorder.setValor(e+"");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // expr ::= expr MAS expr 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // expr ::= expr RESTA expr 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // expr ::= expr POR expr 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // expr ::= expr DIV expr 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // expr ::= expr MOD expr 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // expr ::= NUMERO 
                {
                    Object RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object n = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = n;                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // expr ::= RESTA expr 
                {
                    Object RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // expr ::= OPENPAR expr CLOSEPAR 
                {
                    Object RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 141: // expr ::= DECIMAL 
                {
                    Object RESULT = null;
                    int dleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Object d = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = d;                    
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");
                
            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }
    
}
